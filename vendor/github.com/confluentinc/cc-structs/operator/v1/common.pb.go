// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: operator/v1/common.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//Phase is a high-level summary of the basic PSC lifecycle (creation, maintenance and deletion)
type Phase int32

const (
	// Operator is aware of this PSC is created, and has begun taking actions. PENDING can also be set during a PSC spec change when current phase is not RUNNING.
	Phase_PENDING Phase = 0
	// Operator is working on keeping resources up and matching desired state. This phase does not mean that all resources are up. RUNNING is set from PENDING after ResourceReady becomes true for the first time, RUNNING would not change back to PENDING if ResourceReady becomes false.
	Phase_RUNNING Phase = 1
	// Operator encountered an error in it's control loop.
	Phase_ERROR Phase = 2
	// Operator has issued deletion on all the resources of the PSC.
	Phase_DELETED Phase = 3
	// Operator is aware of a PSC delete is requested and is working on deleting resources.
	Phase_DELETING Phase = 4
)

var Phase_name = map[int32]string{
	0: "PENDING",
	1: "RUNNING",
	2: "ERROR",
	3: "DELETED",
	4: "DELETING",
}

var Phase_value = map[string]int32{
	"PENDING":  0,
	"RUNNING":  1,
	"ERROR":    2,
	"DELETED":  3,
	"DELETING": 4,
}

func (x Phase) String() string {
	return proto.EnumName(Phase_name, int32(x))
}

func (Phase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_92f8566cb4d5bc46, []int{0}
}

type KafkaDependency struct {
	BootstrapServers     string   `protobuf:"bytes,1,opt,name=bootstrap_servers,json=bootstrapServers,proto3" json:"bootstrap_servers,omitempty" db:"bootstrap_servers,omitempty" url:"bootstrap_servers,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty" db:"key,omitempty" url:"key,omitempty"`
	Secret               string   `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty" redact:"-" db:"secret,omitempty" url:"secret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KafkaDependency) Reset()         { *m = KafkaDependency{} }
func (m *KafkaDependency) String() string { return proto.CompactTextString(m) }
func (*KafkaDependency) ProtoMessage()    {}
func (*KafkaDependency) Descriptor() ([]byte, []int) {
	return fileDescriptor_92f8566cb4d5bc46, []int{0}
}
func (m *KafkaDependency) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KafkaDependency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KafkaDependency.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KafkaDependency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KafkaDependency.Merge(m, src)
}
func (m *KafkaDependency) XXX_Size() int {
	return m.Size()
}
func (m *KafkaDependency) XXX_DiscardUnknown() {
	xxx_messageInfo_KafkaDependency.DiscardUnknown(m)
}

var xxx_messageInfo_KafkaDependency proto.InternalMessageInfo

func (m *KafkaDependency) GetBootstrapServers() string {
	if m != nil {
		return m.BootstrapServers
	}
	return ""
}

func (m *KafkaDependency) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KafkaDependency) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func init() {
	proto.RegisterEnum("operator.v1.Phase", Phase_name, Phase_value)
	proto.RegisterType((*KafkaDependency)(nil), "operator.v1.KafkaDependency")
}

func init() { proto.RegisterFile("operator/v1/common.proto", fileDescriptor_92f8566cb4d5bc46) }

var fileDescriptor_92f8566cb4d5bc46 = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xcf, 0x6a, 0xe2, 0x40,
	0x1c, 0xc7, 0x37, 0xba, 0xba, 0xeb, 0xb8, 0xb0, 0xd9, 0xb0, 0x87, 0xb0, 0x07, 0x95, 0x1c, 0xb6,
	0x45, 0x6a, 0x42, 0xe8, 0xa1, 0xa0, 0x3d, 0x49, 0x52, 0x29, 0x2d, 0xa9, 0xc4, 0xf6, 0xd2, 0x4b,
	0x49, 0x26, 0xa3, 0xa6, 0x9a, 0xfc, 0xc2, 0xcc, 0x24, 0x90, 0x47, 0xe9, 0x1b, 0xf5, 0xd8, 0x27,
	0x90, 0xe2, 0x23, 0xf8, 0x04, 0x65, 0x92, 0x56, 0x2c, 0x81, 0xde, 0xe6, 0xfb, 0x67, 0x3e, 0xbf,
	0xc3, 0x17, 0xa9, 0x90, 0x10, 0xea, 0x71, 0xa0, 0x46, 0x66, 0x1a, 0x18, 0xa2, 0x08, 0x62, 0x3d,
	0xa1, 0xc0, 0x41, 0x69, 0x7f, 0x24, 0x7a, 0x66, 0xfe, 0xfb, 0xbb, 0x80, 0x05, 0x14, 0xbe, 0x21,
	0x5e, 0x65, 0x45, 0x7b, 0xaa, 0xa1, 0xdf, 0x57, 0xde, 0x7c, 0xe5, 0x59, 0x24, 0x21, 0x71, 0x40,
	0x62, 0x9c, 0x2b, 0x0c, 0xfd, 0xf1, 0x01, 0x38, 0xe3, 0xd4, 0x4b, 0x1e, 0x18, 0xa1, 0x19, 0xa1,
	0x4c, 0x95, 0x7a, 0xd2, 0x71, 0x6b, 0x7c, 0xb1, 0xdb, 0x74, 0xc7, 0x81, 0x3f, 0xd4, 0x2a, 0x85,
	0x13, 0x88, 0x42, 0x4e, 0xa2, 0x84, 0xe7, 0x5a, 0x2f, 0xa5, 0xeb, 0xaf, 0x1b, 0xae, 0xbc, 0x4f,
	0x67, 0x65, 0xa8, 0x9c, 0xa3, 0xfa, 0x8a, 0xe4, 0x6a, 0xad, 0x38, 0xd3, 0xdf, 0x6d, 0xba, 0xff,
	0xc5, 0x99, 0x15, 0xc9, 0x2b, 0xe0, 0xcf, 0x9e, 0x2b, 0xbe, 0x29, 0x33, 0xd4, 0x64, 0x04, 0x53,
	0xc2, 0xd5, 0x7a, 0x01, 0x18, 0xed, 0x36, 0xdd, 0x33, 0x4a, 0x02, 0x0f, 0xf3, 0xa1, 0x36, 0xd0,
	0x7a, 0x82, 0x55, 0x16, 0x2a, 0xb8, 0x8a, 0xed, 0xbe, 0xa3, 0xfa, 0x13, 0xd4, 0x98, 0x2e, 0x3d,
	0x46, 0x94, 0x36, 0xfa, 0x31, 0xb5, 0x1d, 0xeb, 0xd2, 0x99, 0xc8, 0xdf, 0x84, 0x70, 0xef, 0x1c,
	0x47, 0x08, 0x49, 0x69, 0xa1, 0x86, 0xed, 0xba, 0x37, 0xae, 0x5c, 0x13, 0xbe, 0x65, 0x5f, 0xdb,
	0xb7, 0xb6, 0x25, 0xd7, 0x95, 0x5f, 0xe8, 0x67, 0x21, 0x44, 0xeb, 0xfb, 0xf8, 0xf1, 0x79, 0xdb,
	0x91, 0x5e, 0xb6, 0x1d, 0xe9, 0x75, 0xdb, 0x91, 0xd0, 0x51, 0x08, 0x3a, 0x86, 0x78, 0xbe, 0x4e,
	0x49, 0xcc, 0x75, 0xbc, 0x86, 0x34, 0x28, 0xc7, 0xf0, 0xd3, 0xb9, 0x7e, 0xb0, 0xd8, 0x54, 0xba,
	0x37, 0x17, 0x21, 0x5f, 0xa6, 0xbe, 0x8e, 0x21, 0x32, 0xf6, 0x5f, 0xc2, 0x18, 0x1b, 0x18, 0x0f,
	0x18, 0xa7, 0x29, 0xe6, 0xcc, 0x38, 0x58, 0x7f, 0x94, 0x99, 0x7e, 0xb3, 0x40, 0x9d, 0xbe, 0x05,
	0x00, 0x00, 0xff, 0xff, 0xed, 0xb9, 0xda, 0xc8, 0x16, 0x02, 0x00, 0x00,
}

func (m *KafkaDependency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KafkaDependency) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BootstrapServers) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.BootstrapServers)))
		i += copy(dAtA[i:], m.BootstrapServers)
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Secret) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Secret)))
		i += copy(dAtA[i:], m.Secret)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *KafkaDependency) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BootstrapServers)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCommon(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KafkaDependency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KafkaDependency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KafkaDependency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootstrapServers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BootstrapServers = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCommon
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCommon(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCommon
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCommon = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon   = fmt.Errorf("proto: integer overflow")
)
