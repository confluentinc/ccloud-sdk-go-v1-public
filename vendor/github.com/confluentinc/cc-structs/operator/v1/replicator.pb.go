// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: operator/v1/replicator.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ReplicatorInfo struct {
	Name                   string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" db:"name,omitempty" url:"name,omitempty"`
	AccountId              string            `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty" db:"account_id,omitempty" url:"account_id,omitempty"`
	KafkaClusterId         string            `protobuf:"bytes,3,opt,name=kafka_cluster_id,json=kafkaClusterId,proto3" json:"kafka_cluster_id,omitempty" db:"kafka_cluster_id,omitempty" url:"kafka_cluster_id,omitempty"`
	PhysicalClusterId      string            `protobuf:"bytes,4,opt,name=physical_cluster_id,json=physicalClusterId,proto3" json:"physical_cluster_id,omitempty" db:"physical_cluster_id,omitempty" url:"physical_cluster_id,omitempty"`
	SourceClusterName      string            `protobuf:"bytes,5,opt,name=source_cluster_name,json=sourceClusterName,proto3" json:"source_cluster_name,omitempty" db:"source_cluster_name,omitempty" url:"source_cluster_name,omitempty"`
	DestinationClusterName string            `protobuf:"bytes,6,opt,name=destination_cluster_name,json=destinationClusterName,proto3" json:"destination_cluster_name,omitempty" db:"destination_cluster_name,omitempty" url:"destination_cluster_name,omitempty"`
	KafkaUserId            int32             `protobuf:"varint,7,opt,name=kafka_user_id,json=kafkaUserId,proto3" json:"kafka_user_id,omitempty" db:"kafka_user_id,omitempty" url:"kafka_user_id,omitempty"`
	Status                 string            `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty" db:"status,omitempty" url:"status,omitempty"`
	ServiceProvider        string            `protobuf:"bytes,9,opt,name=service_provider,json=serviceProvider,proto3" json:"service_provider,omitempty" db:"service_provider,omitempty" url:"service_provider,omitempty"`
	Region                 string            `protobuf:"bytes,10,opt,name=region,proto3" json:"region,omitempty" db:"region,omitempty" url:"region,omitempty"`
	OrganizationId         int32             `protobuf:"varint,11,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty" db:"organization_id,omitempty" url:"organization_id,omitempty"`
	Config                 map[string]string `protobuf:"bytes,12,rep,name=config,proto3" json:"config,omitempty" db:"config,omitempty" url:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tasks                  []*ReplicatorTask `protobuf:"bytes,13,rep,name=tasks,proto3" json:"tasks,omitempty" db:"tasks,omitempty" url:"tasks,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}          `json:"-"`
	XXX_unrecognized       []byte            `json:"-"`
	XXX_sizecache          int32             `json:"-"`
}

func (m *ReplicatorInfo) Reset()         { *m = ReplicatorInfo{} }
func (m *ReplicatorInfo) String() string { return proto.CompactTextString(m) }
func (*ReplicatorInfo) ProtoMessage()    {}
func (*ReplicatorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c993138b7b6324f, []int{0}
}
func (m *ReplicatorInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicatorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicatorInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicatorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicatorInfo.Merge(m, src)
}
func (m *ReplicatorInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReplicatorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicatorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicatorInfo proto.InternalMessageInfo

func (m *ReplicatorInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReplicatorInfo) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *ReplicatorInfo) GetKafkaClusterId() string {
	if m != nil {
		return m.KafkaClusterId
	}
	return ""
}

func (m *ReplicatorInfo) GetPhysicalClusterId() string {
	if m != nil {
		return m.PhysicalClusterId
	}
	return ""
}

func (m *ReplicatorInfo) GetSourceClusterName() string {
	if m != nil {
		return m.SourceClusterName
	}
	return ""
}

func (m *ReplicatorInfo) GetDestinationClusterName() string {
	if m != nil {
		return m.DestinationClusterName
	}
	return ""
}

func (m *ReplicatorInfo) GetKafkaUserId() int32 {
	if m != nil {
		return m.KafkaUserId
	}
	return 0
}

func (m *ReplicatorInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ReplicatorInfo) GetServiceProvider() string {
	if m != nil {
		return m.ServiceProvider
	}
	return ""
}

func (m *ReplicatorInfo) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *ReplicatorInfo) GetOrganizationId() int32 {
	if m != nil {
		return m.OrganizationId
	}
	return 0
}

func (m *ReplicatorInfo) GetConfig() map[string]string {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ReplicatorInfo) GetTasks() []*ReplicatorTask {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type ReplicatorUserMetric struct {
	Metric               *ReplicatorMetric            `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty" db:"metric,omitempty" url:"metric,omitempty"`
	TopicMetrics         map[string]*ReplicatorMetric `protobuf:"bytes,2,rep,name=topic_metrics,json=topicMetrics,proto3" json:"topic_metrics,omitempty" db:"topic_metrics,omitempty" url:"topic_metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ReplicatorUserMetric) Reset()         { *m = ReplicatorUserMetric{} }
func (m *ReplicatorUserMetric) String() string { return proto.CompactTextString(m) }
func (*ReplicatorUserMetric) ProtoMessage()    {}
func (*ReplicatorUserMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c993138b7b6324f, []int{1}
}
func (m *ReplicatorUserMetric) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicatorUserMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicatorUserMetric.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicatorUserMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicatorUserMetric.Merge(m, src)
}
func (m *ReplicatorUserMetric) XXX_Size() int {
	return m.Size()
}
func (m *ReplicatorUserMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicatorUserMetric.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicatorUserMetric proto.InternalMessageInfo

func (m *ReplicatorUserMetric) GetMetric() *ReplicatorMetric {
	if m != nil {
		return m.Metric
	}
	return nil
}

func (m *ReplicatorUserMetric) GetTopicMetrics() map[string]*ReplicatorMetric {
	if m != nil {
		return m.TopicMetrics
	}
	return nil
}

type ReplicatorTask struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" db:"id,omitempty" url:"id,omitempty"`
	State                string   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty" db:"state,omitempty" url:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplicatorTask) Reset()         { *m = ReplicatorTask{} }
func (m *ReplicatorTask) String() string { return proto.CompactTextString(m) }
func (*ReplicatorTask) ProtoMessage()    {}
func (*ReplicatorTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c993138b7b6324f, []int{2}
}
func (m *ReplicatorTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicatorTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicatorTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicatorTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicatorTask.Merge(m, src)
}
func (m *ReplicatorTask) XXX_Size() int {
	return m.Size()
}
func (m *ReplicatorTask) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicatorTask.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicatorTask proto.InternalMessageInfo

func (m *ReplicatorTask) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ReplicatorTask) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type ReplicatorMetric struct {
	ByteThroughput       int64    `protobuf:"varint,1,opt,name=byte_throughput,json=byteThroughput,proto3" json:"byte_throughput,omitempty" db:"byte_throughput,omitempty" url:"byte_throughput,omitempty"`
	Throughput           int64    `protobuf:"varint,2,opt,name=throughput,proto3" json:"throughput,omitempty" db:"throughput,omitempty" url:"throughput,omitempty"`
	Lag                  int64    `protobuf:"varint,3,opt,name=lag,proto3" json:"lag,omitempty" db:"lag,omitempty" url:"lag,omitempty"`
	Latency              int64    `protobuf:"varint,4,opt,name=latency,proto3" json:"latency,omitempty" db:"latency,omitempty" url:"latency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplicatorMetric) Reset()         { *m = ReplicatorMetric{} }
func (m *ReplicatorMetric) String() string { return proto.CompactTextString(m) }
func (*ReplicatorMetric) ProtoMessage()    {}
func (*ReplicatorMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c993138b7b6324f, []int{3}
}
func (m *ReplicatorMetric) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicatorMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicatorMetric.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicatorMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicatorMetric.Merge(m, src)
}
func (m *ReplicatorMetric) XXX_Size() int {
	return m.Size()
}
func (m *ReplicatorMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicatorMetric.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicatorMetric proto.InternalMessageInfo

func (m *ReplicatorMetric) GetByteThroughput() int64 {
	if m != nil {
		return m.ByteThroughput
	}
	return 0
}

func (m *ReplicatorMetric) GetThroughput() int64 {
	if m != nil {
		return m.Throughput
	}
	return 0
}

func (m *ReplicatorMetric) GetLag() int64 {
	if m != nil {
		return m.Lag
	}
	return 0
}

func (m *ReplicatorMetric) GetLatency() int64 {
	if m != nil {
		return m.Latency
	}
	return 0
}

func init() {
	proto.RegisterType((*ReplicatorInfo)(nil), "operator.v1.ReplicatorInfo")
	proto.RegisterMapType((map[string]string)(nil), "operator.v1.ReplicatorInfo.ConfigEntry")
	proto.RegisterType((*ReplicatorUserMetric)(nil), "operator.v1.ReplicatorUserMetric")
	proto.RegisterMapType((map[string]*ReplicatorMetric)(nil), "operator.v1.ReplicatorUserMetric.TopicMetricsEntry")
	proto.RegisterType((*ReplicatorTask)(nil), "operator.v1.ReplicatorTask")
	proto.RegisterType((*ReplicatorMetric)(nil), "operator.v1.ReplicatorMetric")
}

func init() { proto.RegisterFile("operator/v1/replicator.proto", fileDescriptor_3c993138b7b6324f) }

var fileDescriptor_3c993138b7b6324f = []byte{
	// 897 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0x96, 0x93, 0x6d, 0x96, 0x4e, 0xb6, 0xdd, 0xd6, 0xac, 0x90, 0x55, 0xa0, 0xae, 0x22, 0x04,
	0xd1, 0xaa, 0x38, 0xb4, 0xcb, 0xa1, 0x2a, 0x68, 0x59, 0x65, 0x17, 0x44, 0x11, 0xa0, 0xd5, 0xa8,
	0x08, 0xc4, 0x25, 0x9a, 0x8c, 0xa7, 0xee, 0x28, 0x8e, 0x27, 0xcc, 0x8c, 0x23, 0x65, 0x7f, 0x04,
	0xe2, 0x82, 0xc4, 0x6f, 0xe1, 0x17, 0x70, 0xe4, 0xc6, 0xcd, 0x42, 0x95, 0x90, 0x38, 0xfb, 0x17,
	0xa0, 0x99, 0x71, 0x13, 0xdb, 0x13, 0x87, 0x95, 0x7a, 0x73, 0xbe, 0xef, 0xbd, 0xef, 0x7b, 0x9e,
	0xf7, 0xfc, 0x32, 0xe0, 0x1d, 0x36, 0x23, 0x1c, 0x49, 0xc6, 0x07, 0xf3, 0x93, 0x01, 0x27, 0xb3,
	0x98, 0x62, 0xf5, 0x2b, 0x98, 0x71, 0x26, 0x99, 0xdb, 0xbd, 0x65, 0x83, 0xf9, 0xc9, 0xc1, 0xa3,
	0x88, 0x45, 0x4c, 0xe3, 0x03, 0xf5, 0x64, 0x42, 0x7a, 0xff, 0x76, 0xc1, 0x2e, 0x5c, 0xe6, 0x5d,
	0x24, 0x57, 0xcc, 0x7d, 0x06, 0xee, 0x25, 0x68, 0x4a, 0x3c, 0xe7, 0xc8, 0xe9, 0x6f, 0x0f, 0x8f,
	0xf3, 0xcc, 0xef, 0x87, 0xe3, 0xf3, 0x9e, 0xc2, 0x8e, 0xd9, 0x94, 0x4a, 0x32, 0x9d, 0xc9, 0x45,
	0xef, 0x28, 0xe5, 0xb1, 0x05, 0x42, 0x9d, 0xe9, 0x7e, 0x0f, 0x00, 0xc2, 0x98, 0xa5, 0x89, 0x1c,
	0xd1, 0xd0, 0x6b, 0x69, 0x9d, 0xb3, 0x3c, 0xf3, 0x3f, 0x56, 0x3a, 0x2b, 0xc6, 0x52, 0x5b, 0x4b,
	0xc1, 0xed, 0x02, 0xbe, 0x08, 0xdd, 0x04, 0xec, 0x4d, 0xd0, 0xd5, 0x04, 0x8d, 0x70, 0x9c, 0x0a,
	0x49, 0xb8, 0x92, 0x6f, 0x6b, 0xf9, 0x17, 0x79, 0xe6, 0x3f, 0x53, 0xf2, 0x75, 0xde, 0x32, 0xd9,
	0x10, 0x00, 0x77, 0x35, 0xf9, 0xdc, 0x70, 0x17, 0xa1, 0xfb, 0x0a, 0xbc, 0x39, 0xbb, 0x5e, 0x08,
	0x8a, 0x51, 0x5c, 0xb6, 0xbc, 0xa7, 0x2d, 0xbf, 0xca, 0x33, 0xff, 0x0b, 0x65, 0xb9, 0x26, 0xc4,
	0x72, 0xdd, 0x1c, 0x03, 0xf7, 0x6f, 0xf9, 0x8a, 0xb7, 0x60, 0x29, 0xc7, 0x64, 0x99, 0xa2, 0xbb,
	0xb2, 0x55, 0xf5, 0x5e, 0x13, 0x62, 0x79, 0x6f, 0x8e, 0x81, 0xfb, 0x86, 0x2f, 0x9c, 0xbf, 0x55,
	0x0d, 0xfc, 0xd9, 0x01, 0x5e, 0x48, 0x84, 0xa4, 0x09, 0x92, 0x94, 0x25, 0xd5, 0x0a, 0x3a, 0xba,
	0x82, 0xcb, 0x3c, 0xf3, 0x5f, 0xaa, 0x0a, 0x9a, 0xe2, 0xac, 0x32, 0x5e, 0x23, 0x10, 0xbe, 0x55,
	0x0a, 0x2a, 0x17, 0x34, 0x06, 0x3b, 0xa6, 0x6f, 0xa9, 0x30, 0x2d, 0xb8, 0x7f, 0xe4, 0xf4, 0xb7,
	0x86, 0x4f, 0xf3, 0xcc, 0x3f, 0x5f, 0x75, 0xbd, 0x20, 0x1b, 0x5a, 0x6e, 0xb3, 0xb0, 0xab, 0x99,
	0xef, 0x84, 0x3e, 0xf0, 0x2f, 0x41, 0x47, 0x48, 0x24, 0x53, 0xe1, 0xbd, 0xa1, 0xdf, 0xf0, 0xa3,
	0x3c, 0xf3, 0x8f, 0xf5, 0x19, 0x6b, 0xd4, 0x3e, 0xd6, 0x3a, 0x0c, 0x8b, 0x7c, 0x97, 0x81, 0x3d,
	0x41, 0xf8, 0x9c, 0x62, 0x32, 0x9a, 0x71, 0x36, 0xa7, 0x21, 0xe1, 0xde, 0x76, 0x75, 0x4c, 0xeb,
	0xbc, 0xad, 0xde, 0x1c, 0x00, 0x1f, 0x16, 0xe4, 0xcb, 0x82, 0x53, 0xa5, 0x73, 0x12, 0x51, 0x96,
	0x78, 0xa0, 0x5a, 0xba, 0x41, 0x2d, 0x71, 0x0b, 0x86, 0x45, 0xbe, 0x3b, 0x01, 0x0f, 0x19, 0x8f,
	0x50, 0x42, 0x5f, 0x99, 0x46, 0xd1, 0xd0, 0xeb, 0xea, 0xa3, 0x1e, 0xe6, 0x99, 0xff, 0x54, 0x49,
	0xd6, 0x68, 0x4b, 0xbb, 0x99, 0x87, 0xbb, 0x65, 0xee, 0x22, 0x74, 0x7f, 0x02, 0x1d, 0xcc, 0x92,
	0x2b, 0x1a, 0x79, 0x0f, 0x8e, 0xda, 0xfd, 0xee, 0xe9, 0x07, 0x41, 0x69, 0x61, 0x05, 0xd5, 0xb5,
	0x14, 0x3c, 0xd7, 0x91, 0x9f, 0x27, 0x92, 0x2f, 0x56, 0xef, 0x67, 0xd2, 0xad, 0x1a, 0x2c, 0x18,
	0x16, 0x46, 0x2e, 0x02, 0x5b, 0x12, 0x89, 0x89, 0xf0, 0x76, 0xb4, 0xe3, 0xdb, 0x0d, 0x8e, 0x97,
	0x48, 0x4c, 0x86, 0x41, 0x9e, 0xf9, 0x8f, 0x95, 0x8b, 0xce, 0xb0, 0x4c, 0xea, 0x28, 0x34, 0xca,
	0x07, 0xbf, 0x3a, 0xa0, 0x5b, 0x2a, 0xd6, 0xfd, 0x14, 0xb4, 0x27, 0x64, 0x51, 0xac, 0xd3, 0xc7,
	0x79, 0xe6, 0xbf, 0xaf, 0x27, 0x96, 0x2c, 0xec, 0x39, 0xad, 0x60, 0x50, 0xa5, 0xb9, 0x2f, 0xc0,
	0xd6, 0x1c, 0xc5, 0x29, 0x29, 0xd6, 0xe8, 0xb2, 0x26, 0x0d, 0x5a, 0x0a, 0x75, 0x14, 0x9a, 0xe4,
	0xf3, 0xd6, 0x99, 0xd3, 0xfb, 0xab, 0x0d, 0x1e, 0xad, 0xde, 0x50, 0x0d, 0xfd, 0x37, 0x44, 0x72,
	0x8a, 0xdd, 0x08, 0x74, 0xa6, 0xfa, 0x49, 0xd7, 0xd8, 0x3d, 0x7d, 0xb7, 0xe1, 0x50, 0x4c, 0xf8,
	0xea, 0xf0, 0x4d, 0x92, 0x55, 0x83, 0x05, 0xc3, 0x42, 0xde, 0xfd, 0xcd, 0x01, 0x3b, 0x92, 0xcd,
	0x28, 0x1e, 0x19, 0x40, 0x78, 0x2d, 0xdd, 0x85, 0x27, 0x0d, 0x86, 0xab, 0x1a, 0x83, 0x4b, 0x95,
	0x66, 0x9e, 0x85, 0x99, 0x81, 0xe5, 0xb7, 0x5f, 0x51, 0xb4, 0xbb, 0xd4, 0xc0, 0xc2, 0x07, 0xb2,
	0x24, 0x79, 0xf0, 0xbb, 0x03, 0xf6, 0x2d, 0x8f, 0x3b, 0xb6, 0x0e, 0x97, 0x5b, 0xf7, 0xbf, 0xc7,
	0x7a, 0x87, 0xce, 0xfe, 0xe2, 0x94, 0xff, 0xc4, 0xd5, 0xec, 0xba, 0x67, 0xa0, 0x45, 0xc3, 0xa2,
	0xf0, 0x7e, 0x9e, 0xf9, 0xef, 0x29, 0xe5, 0x35, 0x5f, 0x6b, 0xf5, 0x03, 0x6d, 0xd1, 0x50, 0x0d,
	0x9c, 0x5a, 0x63, 0xd6, 0xc0, 0x69, 0x70, 0xed, 0x12, 0xac, 0x96, 0xa5, 0x91, 0xde, 0x3f, 0x2d,
	0xb0, 0x57, 0x7f, 0x45, 0xb5, 0x5c, 0xc6, 0x0b, 0x49, 0x46, 0xf2, 0x9a, 0xb3, 0x34, 0xba, 0x9e,
	0xa5, 0x52, 0x57, 0xd8, 0x5e, 0x2d, 0x97, 0x1a, 0x6d, 0xd9, 0x35, 0xf3, 0x70, 0x57, 0x71, 0x97,
	0x4b, 0xca, 0xfd, 0x01, 0x80, 0x92, 0x4f, 0x4b, 0xfb, 0x2c, 0x2f, 0x21, 0x1b, 0x2c, 0xd6, 0xab,
	0x97, 0xb4, 0xd4, 0x54, 0xc4, 0x28, 0xd2, 0x17, 0x8f, 0xf6, 0x6a, 0x2a, 0x62, 0x64, 0xef, 0xa1,
	0x2a, 0x06, 0x55, 0x9a, 0xfb, 0x35, 0xb8, 0x1f, 0x23, 0x49, 0x12, 0xbc, 0xd0, 0xf7, 0x88, 0xf6,
	0xf0, 0x34, 0xcf, 0xfc, 0xc0, 0x28, 0x68, 0x78, 0x8d, 0x4a, 0x1d, 0x87, 0xb7, 0x12, 0xc3, 0xcf,
	0xfe, 0xb8, 0x39, 0x74, 0xfe, 0xbc, 0x39, 0x74, 0xfe, 0xbe, 0x39, 0x74, 0x7e, 0x3c, 0x89, 0xa8,
	0xbc, 0x4e, 0xc7, 0x01, 0x66, 0xd3, 0x81, 0x5a, 0x78, 0x71, 0x4a, 0x12, 0x49, 0x13, 0x3c, 0xc0,
	0xf8, 0x43, 0x21, 0x79, 0x8a, 0xa5, 0x18, 0x94, 0x6e, 0x8c, 0x9f, 0xcc, 0x4f, 0xc6, 0x1d, 0x7d,
	0x0f, 0x7c, 0xf2, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x06, 0x12, 0x0d, 0x4a, 0x0a, 0x00,
	0x00,
}

func (m *ReplicatorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicatorInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReplicator(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.AccountId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintReplicator(dAtA, i, uint64(len(m.AccountId)))
		i += copy(dAtA[i:], m.AccountId)
	}
	if len(m.KafkaClusterId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintReplicator(dAtA, i, uint64(len(m.KafkaClusterId)))
		i += copy(dAtA[i:], m.KafkaClusterId)
	}
	if len(m.PhysicalClusterId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintReplicator(dAtA, i, uint64(len(m.PhysicalClusterId)))
		i += copy(dAtA[i:], m.PhysicalClusterId)
	}
	if len(m.SourceClusterName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintReplicator(dAtA, i, uint64(len(m.SourceClusterName)))
		i += copy(dAtA[i:], m.SourceClusterName)
	}
	if len(m.DestinationClusterName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintReplicator(dAtA, i, uint64(len(m.DestinationClusterName)))
		i += copy(dAtA[i:], m.DestinationClusterName)
	}
	if m.KafkaUserId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintReplicator(dAtA, i, uint64(m.KafkaUserId))
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintReplicator(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if len(m.ServiceProvider) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintReplicator(dAtA, i, uint64(len(m.ServiceProvider)))
		i += copy(dAtA[i:], m.ServiceProvider)
	}
	if len(m.Region) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintReplicator(dAtA, i, uint64(len(m.Region)))
		i += copy(dAtA[i:], m.Region)
	}
	if m.OrganizationId != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintReplicator(dAtA, i, uint64(m.OrganizationId))
	}
	if len(m.Config) > 0 {
		for k, _ := range m.Config {
			dAtA[i] = 0x62
			i++
			v := m.Config[k]
			mapSize := 1 + len(k) + sovReplicator(uint64(len(k))) + 1 + len(v) + sovReplicator(uint64(len(v)))
			i = encodeVarintReplicator(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintReplicator(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintReplicator(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Tasks) > 0 {
		for _, msg := range m.Tasks {
			dAtA[i] = 0x6a
			i++
			i = encodeVarintReplicator(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReplicatorUserMetric) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicatorUserMetric) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metric != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReplicator(dAtA, i, uint64(m.Metric.Size()))
		n1, err := m.Metric.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.TopicMetrics) > 0 {
		for k, _ := range m.TopicMetrics {
			dAtA[i] = 0x12
			i++
			v := m.TopicMetrics[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovReplicator(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovReplicator(uint64(len(k))) + msgSize
			i = encodeVarintReplicator(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintReplicator(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintReplicator(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReplicatorTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicatorTask) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReplicator(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintReplicator(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReplicatorMetric) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicatorMetric) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ByteThroughput != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintReplicator(dAtA, i, uint64(m.ByteThroughput))
	}
	if m.Throughput != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintReplicator(dAtA, i, uint64(m.Throughput))
	}
	if m.Lag != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintReplicator(dAtA, i, uint64(m.Lag))
	}
	if m.Latency != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintReplicator(dAtA, i, uint64(m.Latency))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintReplicator(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ReplicatorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovReplicator(uint64(l))
	}
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovReplicator(uint64(l))
	}
	l = len(m.KafkaClusterId)
	if l > 0 {
		n += 1 + l + sovReplicator(uint64(l))
	}
	l = len(m.PhysicalClusterId)
	if l > 0 {
		n += 1 + l + sovReplicator(uint64(l))
	}
	l = len(m.SourceClusterName)
	if l > 0 {
		n += 1 + l + sovReplicator(uint64(l))
	}
	l = len(m.DestinationClusterName)
	if l > 0 {
		n += 1 + l + sovReplicator(uint64(l))
	}
	if m.KafkaUserId != 0 {
		n += 1 + sovReplicator(uint64(m.KafkaUserId))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovReplicator(uint64(l))
	}
	l = len(m.ServiceProvider)
	if l > 0 {
		n += 1 + l + sovReplicator(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovReplicator(uint64(l))
	}
	if m.OrganizationId != 0 {
		n += 1 + sovReplicator(uint64(m.OrganizationId))
	}
	if len(m.Config) > 0 {
		for k, v := range m.Config {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovReplicator(uint64(len(k))) + 1 + len(v) + sovReplicator(uint64(len(v)))
			n += mapEntrySize + 1 + sovReplicator(uint64(mapEntrySize))
		}
	}
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovReplicator(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplicatorUserMetric) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metric != nil {
		l = m.Metric.Size()
		n += 1 + l + sovReplicator(uint64(l))
	}
	if len(m.TopicMetrics) > 0 {
		for k, v := range m.TopicMetrics {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovReplicator(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovReplicator(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovReplicator(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplicatorTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovReplicator(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovReplicator(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplicatorMetric) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ByteThroughput != 0 {
		n += 1 + sovReplicator(uint64(m.ByteThroughput))
	}
	if m.Throughput != 0 {
		n += 1 + sovReplicator(uint64(m.Throughput))
	}
	if m.Lag != 0 {
		n += 1 + sovReplicator(uint64(m.Lag))
	}
	if m.Latency != 0 {
		n += 1 + sovReplicator(uint64(m.Latency))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovReplicator(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozReplicator(x uint64) (n int) {
	return sovReplicator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReplicatorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicatorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicatorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KafkaClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KafkaClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhysicalClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhysicalClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KafkaUserId", wireType)
			}
			m.KafkaUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KafkaUserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationId", wireType)
			}
			m.OrganizationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrganizationId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReplicator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReplicator
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthReplicator
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthReplicator
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReplicator
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthReplicator
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthReplicator
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipReplicator(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthReplicator
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Config[mapkey] = mapvalue
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &ReplicatorTask{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicatorUserMetric) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicatorUserMetric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicatorUserMetric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metric == nil {
				m.Metric = &ReplicatorMetric{}
			}
			if err := m.Metric.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicMetrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopicMetrics == nil {
				m.TopicMetrics = make(map[string]*ReplicatorMetric)
			}
			var mapkey string
			var mapvalue *ReplicatorMetric
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReplicator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReplicator
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthReplicator
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthReplicator
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReplicator
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthReplicator
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthReplicator
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ReplicatorMetric{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipReplicator(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthReplicator
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TopicMetrics[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicatorTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicatorTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicatorTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicatorMetric) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicatorMetric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicatorMetric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteThroughput", wireType)
			}
			m.ByteThroughput = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ByteThroughput |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Throughput", wireType)
			}
			m.Throughput = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Throughput |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lag", wireType)
			}
			m.Lag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lag |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latency", wireType)
			}
			m.Latency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Latency |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReplicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReplicator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReplicator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReplicator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReplicator
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthReplicator
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowReplicator
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipReplicator(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthReplicator
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthReplicator = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReplicator   = fmt.Errorf("proto: integer overflow")
)
