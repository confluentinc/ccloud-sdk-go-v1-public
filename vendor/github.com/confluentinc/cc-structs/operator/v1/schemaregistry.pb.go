// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: operator/v1/schemaregistry.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type SchemaRegistryClusterList struct {
	*v1.TypeMeta         `protobuf:"bytes,1,opt,name=type_meta,json=typeMeta,proto3,embedded=type_meta" json:",inline" db:"type_meta,omitempty" url:"type_meta,omitempty"`
	*v1.ListMeta         `protobuf:"bytes,2,opt,name=list_meta,json=listMeta,proto3,embedded=list_meta" json:"metadata,omitempty" db:"list_meta,omitempty" url:"list_meta,omitempty"`
	Items                []*SchemaRegistryCluster `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty" db:"items,omitempty" url:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *SchemaRegistryClusterList) Reset()         { *m = SchemaRegistryClusterList{} }
func (m *SchemaRegistryClusterList) String() string { return proto.CompactTextString(m) }
func (*SchemaRegistryClusterList) ProtoMessage()    {}
func (*SchemaRegistryClusterList) Descriptor() ([]byte, []int) {
	return fileDescriptor_cae17fa44adc6e91, []int{0}
}
func (m *SchemaRegistryClusterList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaRegistryClusterList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaRegistryClusterList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchemaRegistryClusterList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaRegistryClusterList.Merge(m, src)
}
func (m *SchemaRegistryClusterList) XXX_Size() int {
	return m.Size()
}
func (m *SchemaRegistryClusterList) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaRegistryClusterList.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaRegistryClusterList proto.InternalMessageInfo

func (m *SchemaRegistryClusterList) GetItems() []*SchemaRegistryCluster {
	if m != nil {
		return m.Items
	}
	return nil
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type SchemaRegistryCluster struct {
	*v1.TypeMeta         `protobuf:"bytes,1,opt,name=type_meta,json=typeMeta,proto3,embedded=type_meta" json:",inline" db:"type_meta,omitempty" url:"type_meta,omitempty"`
	*v1.ObjectMeta       `protobuf:"bytes,2,opt,name=object_meta,json=objectMeta,proto3,embedded=object_meta" json:"metadata,omitempty" db:"object_meta,omitempty" url:"object_meta,omitempty"`
	Status               *SchemaRegistryClusterStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty" db:"status,omitempty" url:"status,omitempty"`
	Spec                 *SchemaRegistryClusterSpec   `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty" db:"spec,omitempty" url:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *SchemaRegistryCluster) Reset()         { *m = SchemaRegistryCluster{} }
func (m *SchemaRegistryCluster) String() string { return proto.CompactTextString(m) }
func (*SchemaRegistryCluster) ProtoMessage()    {}
func (*SchemaRegistryCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_cae17fa44adc6e91, []int{1}
}
func (m *SchemaRegistryCluster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaRegistryCluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaRegistryCluster.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchemaRegistryCluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaRegistryCluster.Merge(m, src)
}
func (m *SchemaRegistryCluster) XXX_Size() int {
	return m.Size()
}
func (m *SchemaRegistryCluster) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaRegistryCluster.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaRegistryCluster proto.InternalMessageInfo

func (m *SchemaRegistryCluster) GetStatus() *SchemaRegistryClusterStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SchemaRegistryCluster) GetSpec() *SchemaRegistryClusterSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type SchemaRegistryClusterSpec struct {
	//unique id for logical Schema Registry cluster
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" db:"id,omitempty" url:"id,omitempty"`
	//unique id for physical Schema Registry cluster
	PhysicalClusterId    string       `protobuf:"bytes,2,opt,name=physical_cluster_id,json=physicalClusterId,proto3" json:"physical_cluster_id,omitempty" db:"physical_cluster_id,omitempty" url:"physical_cluster_id,omitempty"`
	Quotas               *QuotaLimits `protobuf:"bytes,3,opt,name=quotas,proto3" json:"quotas,omitempty" db:"quotas,omitempty" url:"quotas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SchemaRegistryClusterSpec) Reset()         { *m = SchemaRegistryClusterSpec{} }
func (m *SchemaRegistryClusterSpec) String() string { return proto.CompactTextString(m) }
func (*SchemaRegistryClusterSpec) ProtoMessage()    {}
func (*SchemaRegistryClusterSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_cae17fa44adc6e91, []int{2}
}
func (m *SchemaRegistryClusterSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaRegistryClusterSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaRegistryClusterSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchemaRegistryClusterSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaRegistryClusterSpec.Merge(m, src)
}
func (m *SchemaRegistryClusterSpec) XXX_Size() int {
	return m.Size()
}
func (m *SchemaRegistryClusterSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaRegistryClusterSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaRegistryClusterSpec proto.InternalMessageInfo

func (m *SchemaRegistryClusterSpec) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SchemaRegistryClusterSpec) GetPhysicalClusterId() string {
	if m != nil {
		return m.PhysicalClusterId
	}
	return ""
}

func (m *SchemaRegistryClusterSpec) GetQuotas() *QuotaLimits {
	if m != nil {
		return m.Quotas
	}
	return nil
}

type QuotaLimits struct {
	MaxSchemas           int32    `protobuf:"varint,1,opt,name=max_schemas,json=maxSchemas,proto3" json:"max_schemas,omitempty" db:"max_schemas,omitempty" url:"max_schemas,omitempty"`
	MaxSubjects          int32    `protobuf:"varint,2,opt,name=max_subjects,json=maxSubjects,proto3" json:"max_subjects,omitempty" db:"max_subjects,omitempty" url:"max_subjects,omitempty"`
	MaxSchemaSizeBytes   int32    `protobuf:"varint,3,opt,name=max_schema_size_bytes,json=maxSchemaSizeBytes,proto3" json:"max_schema_size_bytes,omitempty" db:"max_schema_size_bytes,omitempty" url:"max_schema_size_bytes,omitempty"`
	MaxLookupsPerHour    int32    `protobuf:"varint,4,opt,name=max_lookups_per_hour,json=maxLookupsPerHour,proto3" json:"max_lookups_per_hour,omitempty" db:"max_lookups_per_hour,omitempty" url:"max_lookups_per_hour,omitempty"`
	MaxUpdatesPerHour    int32    `protobuf:"varint,5,opt,name=max_updates_per_hour,json=maxUpdatesPerHour,proto3" json:"max_updates_per_hour,omitempty" db:"max_updates_per_hour,omitempty" url:"max_updates_per_hour,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuotaLimits) Reset()         { *m = QuotaLimits{} }
func (m *QuotaLimits) String() string { return proto.CompactTextString(m) }
func (*QuotaLimits) ProtoMessage()    {}
func (*QuotaLimits) Descriptor() ([]byte, []int) {
	return fileDescriptor_cae17fa44adc6e91, []int{3}
}
func (m *QuotaLimits) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuotaLimits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuotaLimits.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuotaLimits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuotaLimits.Merge(m, src)
}
func (m *QuotaLimits) XXX_Size() int {
	return m.Size()
}
func (m *QuotaLimits) XXX_DiscardUnknown() {
	xxx_messageInfo_QuotaLimits.DiscardUnknown(m)
}

var xxx_messageInfo_QuotaLimits proto.InternalMessageInfo

func (m *QuotaLimits) GetMaxSchemas() int32 {
	if m != nil {
		return m.MaxSchemas
	}
	return 0
}

func (m *QuotaLimits) GetMaxSubjects() int32 {
	if m != nil {
		return m.MaxSubjects
	}
	return 0
}

func (m *QuotaLimits) GetMaxSchemaSizeBytes() int32 {
	if m != nil {
		return m.MaxSchemaSizeBytes
	}
	return 0
}

func (m *QuotaLimits) GetMaxLookupsPerHour() int32 {
	if m != nil {
		return m.MaxLookupsPerHour
	}
	return 0
}

func (m *QuotaLimits) GetMaxUpdatesPerHour() int32 {
	if m != nil {
		return m.MaxUpdatesPerHour
	}
	return 0
}

type SchemaRegistryClusterStatus struct {
	Time                 *v1.Time `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty" db:"time,omitempty" url:"time,omitempty"`
	Phase                Phase    `protobuf:"varint,2,opt,name=phase,proto3,enum=operator.v1.Phase" json:"phase,omitempty" db:"phase,omitempty" url:"phase,omitempty"`
	Reason               string   `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty" db:"reason,omitempty" url:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchemaRegistryClusterStatus) Reset()         { *m = SchemaRegistryClusterStatus{} }
func (m *SchemaRegistryClusterStatus) String() string { return proto.CompactTextString(m) }
func (*SchemaRegistryClusterStatus) ProtoMessage()    {}
func (*SchemaRegistryClusterStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_cae17fa44adc6e91, []int{4}
}
func (m *SchemaRegistryClusterStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaRegistryClusterStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaRegistryClusterStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchemaRegistryClusterStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaRegistryClusterStatus.Merge(m, src)
}
func (m *SchemaRegistryClusterStatus) XXX_Size() int {
	return m.Size()
}
func (m *SchemaRegistryClusterStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaRegistryClusterStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaRegistryClusterStatus proto.InternalMessageInfo

func (m *SchemaRegistryClusterStatus) GetTime() *v1.Time {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *SchemaRegistryClusterStatus) GetPhase() Phase {
	if m != nil {
		return m.Phase
	}
	return Phase_PENDING
}

func (m *SchemaRegistryClusterStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func init() {
	proto.RegisterType((*SchemaRegistryClusterList)(nil), "operator.v1.SchemaRegistryClusterList")
	proto.RegisterType((*SchemaRegistryCluster)(nil), "operator.v1.SchemaRegistryCluster")
	proto.RegisterType((*SchemaRegistryClusterSpec)(nil), "operator.v1.SchemaRegistryClusterSpec")
	proto.RegisterType((*QuotaLimits)(nil), "operator.v1.QuotaLimits")
	proto.RegisterType((*SchemaRegistryClusterStatus)(nil), "operator.v1.SchemaRegistryClusterStatus")
}

func init() { proto.RegisterFile("operator/v1/schemaregistry.proto", fileDescriptor_cae17fa44adc6e91) }

var fileDescriptor_cae17fa44adc6e91 = []byte{
	// 887 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x41, 0x8f, 0xe3, 0x34,
	0x18, 0x55, 0x3a, 0xed, 0xb0, 0x75, 0x11, 0xd2, 0x9a, 0x5d, 0xa9, 0x2c, 0xd2, 0x64, 0x54, 0x21,
	0xa8, 0x56, 0x43, 0xb2, 0x1d, 0x10, 0x1a, 0x2d, 0x9c, 0x82, 0x40, 0xc3, 0x6a, 0x80, 0xc1, 0xb3,
	0x48, 0x08, 0x0e, 0x91, 0xeb, 0x78, 0x5b, 0xef, 0x24, 0xb1, 0x89, 0x9d, 0xd1, 0x74, 0x24, 0x0e,
	0xfc, 0x05, 0xee, 0x9c, 0x39, 0x72, 0x81, 0x0b, 0xbf, 0x80, 0x0b, 0xd2, 0xfe, 0x82, 0x08, 0xcd,
	0x91, 0x63, 0x7e, 0x01, 0xb2, 0x93, 0xb6, 0xe9, 0x38, 0x94, 0xe1, 0xc6, 0xad, 0xfa, 0xde, 0xfb,
	0xde, 0x7b, 0xf6, 0x67, 0xbb, 0x01, 0xfb, 0x5c, 0xd0, 0x0c, 0x2b, 0x9e, 0xf9, 0x17, 0x13, 0x5f,
	0x92, 0x39, 0x4d, 0x70, 0x46, 0x67, 0x4c, 0xaa, 0x6c, 0xe1, 0x89, 0x8c, 0x2b, 0x0e, 0x07, 0x4b,
	0x86, 0x77, 0x31, 0x79, 0x70, 0x6f, 0xc6, 0x67, 0xdc, 0xd4, 0x7d, 0xfd, 0xab, 0xa2, 0x3c, 0x78,
	0xf7, 0xfc, 0x48, 0x7a, 0x8c, 0xfb, 0x58, 0xb0, 0x04, 0x93, 0x39, 0x4b, 0x69, 0xb6, 0xf0, 0xc5,
	0xf9, 0x4c, 0x17, 0xa4, 0x9f, 0x50, 0x85, 0xb5, 0xfa, 0x8c, 0xa6, 0x5a, 0x88, 0x46, 0x75, 0xd7,
	0xb0, 0x69, 0x4d, 0x78, 0x92, 0xf0, 0xb4, 0x42, 0x46, 0xbf, 0xed, 0x80, 0xd7, 0xce, 0x4c, 0x16,
	0x54, 0x67, 0xf9, 0x30, 0xce, 0xa5, 0xa2, 0xd9, 0x09, 0x93, 0x0a, 0xfe, 0xe0, 0x80, 0xbe, 0x5a,
	0x08, 0x1a, 0x6a, 0xe1, 0xa1, 0xb3, 0xef, 0x8c, 0x07, 0x87, 0x9e, 0x57, 0x45, 0xf0, 0x9a, 0x11,
	0x3c, 0x71, 0x3e, 0xd3, 0x05, 0xe9, 0x69, 0xa6, 0x77, 0x31, 0xf1, 0x9e, 0x2e, 0x04, 0xfd, 0x94,
	0x2a, 0x1c, 0x7c, 0xf4, 0xa2, 0x70, 0x9d, 0xbf, 0x0a, 0xf7, 0xa5, 0x03, 0x96, 0xc6, 0x2c, 0xa5,
	0x65, 0xe1, 0x1e, 0x46, 0xd3, 0xc7, 0xa3, 0x95, 0xee, 0x01, 0x4f, 0x98, 0xa2, 0x89, 0x50, 0x8b,
	0xd1, 0x7e, 0x9e, 0xc5, 0xed, 0x08, 0xba, 0xa3, 0x6a, 0x41, 0xf8, 0xa3, 0x03, 0xfa, 0x31, 0x93,
	0xaa, 0x0a, 0xd5, 0xf9, 0x2f, 0xa1, 0xf4, 0xa2, 0x4c, 0xa8, 0xd3, 0x3a, 0x14, 0xd4, 0x48, 0x84,
	0x9b, 0x56, 0xcb, 0x7c, 0x2b, 0x0b, 0x2b, 0x5f, 0x1b, 0x82, 0xee, 0xc4, 0xb5, 0x36, 0x9c, 0x83,
	0x9e, 0xae, 0xca, 0xe1, 0xce, 0xfe, 0xce, 0x78, 0x70, 0x38, 0xf2, 0x1a, 0x53, 0xf5, 0x5a, 0xf7,
	0x3a, 0xf0, 0xca, 0xc2, 0x7d, 0xa8, 0x4d, 0x4d, 0xa3, 0x65, 0x78, 0xb3, 0x8a, 0x2a, 0x83, 0xd1,
	0x2f, 0x5d, 0x70, 0xbf, 0x55, 0xf0, 0xff, 0x39, 0xb8, 0x9f, 0x1c, 0x30, 0xe0, 0xd3, 0xe7, 0x94,
	0x6c, 0x8c, 0xee, 0xd1, 0xed, 0x62, 0x7d, 0x6e, 0x1a, 0x4d, 0xb0, 0xa7, 0x5b, 0x87, 0xf7, 0x9e,
	0xce, 0xd8, 0xb0, 0xb1, 0x52, 0xb6, 0x63, 0x08, 0xf0, 0x95, 0x03, 0xcc, 0xc0, 0xae, 0x54, 0x58,
	0xe5, 0x7a, 0x86, 0x3a, 0xe3, 0xf8, 0xdf, 0x67, 0x78, 0x66, 0xf8, 0xc1, 0xa3, 0xb2, 0x70, 0x0f,
	0x74, 0x82, 0xaa, 0xdf, 0x32, 0xb7, 0xca, 0xa8, 0x76, 0x82, 0x73, 0xd0, 0x95, 0x82, 0x92, 0x61,
	0xd7, 0x38, 0xbe, 0x79, 0x0b, 0x47, 0x41, 0x49, 0x70, 0x50, 0x16, 0xee, 0xd8, 0xf8, 0x09, 0x4a,
	0x6c, 0xb7, 0xcd, 0x22, 0x32, 0x0e, 0xa3, 0x5f, 0x3b, 0xff, 0x70, 0xe7, 0xb5, 0x22, 0x3c, 0x02,
	0x1d, 0x16, 0x99, 0x23, 0xd3, 0x0f, 0xc6, 0x65, 0xe1, 0xbe, 0x61, 0xce, 0x65, 0x64, 0x1f, 0xca,
	0x66, 0x09, 0x75, 0x58, 0x04, 0xaf, 0xc0, 0xab, 0x62, 0xbe, 0x90, 0x8c, 0xe0, 0x38, 0x24, 0x95,
	0x62, 0xc8, 0x22, 0x33, 0xe6, 0x7e, 0xf0, 0xa4, 0x2c, 0xdc, 0x8f, 0xb5, 0x54, 0x0b, 0xc5, 0xd2,
	0xde, 0xce, 0x41, 0x77, 0x97, 0x78, 0x9d, 0xfb, 0x93, 0x08, 0x4e, 0xc1, 0xee, 0xb7, 0x39, 0x57,
	0x78, 0x39, 0xb1, 0xe1, 0xc6, 0xfe, 0x7d, 0xa1, 0xa1, 0x13, 0x96, 0x30, 0xd5, 0x98, 0x50, 0xc5,
	0xb7, 0xbc, 0xad, 0x32, 0xaa, 0x95, 0x47, 0x7f, 0x74, 0xc1, 0xa0, 0xa1, 0x04, 0xbf, 0x01, 0x83,
	0x04, 0x5f, 0x86, 0xd5, 0x53, 0x2e, 0xcd, 0x96, 0xf5, 0x82, 0xc7, 0xcb, 0x23, 0xd8, 0x80, 0x2c,
	0x8f, 0x76, 0x0c, 0x81, 0x04, 0x5f, 0x56, 0x83, 0x91, 0x30, 0x04, 0x2f, 0x1b, 0x56, 0x6e, 0x4e,
	0xa5, 0x34, 0xbb, 0xd8, 0x0b, 0x3e, 0x28, 0x0b, 0xf7, 0x68, 0xa5, 0x5e, 0x63, 0xed, 0xf2, 0x36,
	0x88, 0x74, 0xdc, 0xb3, 0xba, 0x0e, 0xbf, 0x77, 0xc0, 0xfd, 0x75, 0x8e, 0x50, 0xb2, 0x2b, 0x1a,
	0x4e, 0x17, 0x8a, 0x56, 0x3b, 0xd8, 0x0b, 0x3e, 0x2b, 0x0b, 0xf7, 0xc9, 0xe6, 0x42, 0x1a, 0xa4,
	0x2d, 0x4b, 0x6a, 0x67, 0x21, 0xb8, 0x5a, 0xdc, 0x19, 0xbb, 0xa2, 0x81, 0x86, 0xe1, 0x77, 0xe0,
	0x9e, 0xee, 0x8b, 0x39, 0x3f, 0xcf, 0x85, 0x0c, 0x05, 0xcd, 0xc2, 0x39, 0xcf, 0x33, 0x73, 0x07,
	0x7a, 0xc1, 0x49, 0x59, 0xb8, 0xc7, 0xcb, 0x04, 0x37, 0x39, 0xad, 0x01, 0xb6, 0x90, 0xd0, 0xdd,
	0x04, 0x5f, 0x9e, 0x54, 0xf8, 0x29, 0xcd, 0x8e, 0x79, 0x9e, 0x2d, 0xed, 0x73, 0x11, 0x61, 0x45,
	0x1b, 0xf6, 0x3d, 0xdb, 0xfe, 0x26, 0xa7, 0xd5, 0x7e, 0x0b, 0xc9, 0xd8, 0x7f, 0x59, 0xe1, 0xb5,
	0xfd, 0xe8, 0xe7, 0x0e, 0x78, 0x7d, 0xcb, 0x5b, 0x02, 0x63, 0xd0, 0x55, 0x2c, 0xa1, 0xf5, 0xf3,
	0xfd, 0xf0, 0x96, 0xcf, 0x37, 0x4b, 0xe8, 0xfa, 0x55, 0xd0, 0xfd, 0xf6, 0x33, 0xbd, 0x59, 0x44,
	0xc6, 0x05, 0x7e, 0x05, 0x7a, 0x62, 0x8e, 0x25, 0x35, 0x27, 0xed, 0x95, 0x43, 0xb8, 0x71, 0x81,
	0x4e, 0x35, 0xb2, 0xfe, 0x9b, 0x32, 0xc4, 0x96, 0x5b, 0xbb, 0x59, 0x45, 0x95, 0x20, 0x3c, 0x06,
	0xbb, 0x19, 0xc5, 0x92, 0xa7, 0xe6, 0x64, 0xf5, 0xd7, 0x37, 0xb0, 0xaa, 0x5a, 0x3a, 0x56, 0x19,
	0xd5, 0xfd, 0xc1, 0xf3, 0xdf, 0xaf, 0xf7, 0x9c, 0x17, 0xd7, 0x7b, 0xce, 0x9f, 0xd7, 0x7b, 0x0e,
	0x78, 0x8b, 0x71, 0x8f, 0xf0, 0xf4, 0x59, 0x9c, 0xd3, 0x54, 0x79, 0x24, 0xe6, 0x79, 0xfd, 0xbd,
	0x33, 0xcd, 0x9f, 0x35, 0xd3, 0x9f, 0x3a, 0x5f, 0x4f, 0x66, 0x4c, 0xcd, 0xf3, 0xa9, 0x47, 0x78,
	0xe2, 0xaf, 0x5a, 0x58, 0x4a, 0x7c, 0x42, 0xde, 0x96, 0x2a, 0xcb, 0x89, 0x92, 0x7e, 0xe3, 0x1b,
	0xe9, 0xfd, 0x8b, 0xc9, 0x74, 0xd7, 0x48, 0xbd, 0xf3, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3e,
	0x6c, 0xc1, 0x44, 0xb7, 0x09, 0x00, 0x00,
}

func (m *SchemaRegistryClusterList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaRegistryClusterList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TypeMeta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaregistry(dAtA, i, uint64(m.TypeMeta.Size()))
		n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.ListMeta != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSchemaregistry(dAtA, i, uint64(m.ListMeta.Size()))
		n2, err := m.ListMeta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSchemaregistry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SchemaRegistryCluster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaRegistryCluster) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TypeMeta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaregistry(dAtA, i, uint64(m.TypeMeta.Size()))
		n3, err := m.TypeMeta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.ObjectMeta != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSchemaregistry(dAtA, i, uint64(m.ObjectMeta.Size()))
		n4, err := m.ObjectMeta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSchemaregistry(dAtA, i, uint64(m.Status.Size()))
		n5, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Spec != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSchemaregistry(dAtA, i, uint64(m.Spec.Size()))
		n6, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SchemaRegistryClusterSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaRegistryClusterSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaregistry(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.PhysicalClusterId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSchemaregistry(dAtA, i, uint64(len(m.PhysicalClusterId)))
		i += copy(dAtA[i:], m.PhysicalClusterId)
	}
	if m.Quotas != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSchemaregistry(dAtA, i, uint64(m.Quotas.Size()))
		n7, err := m.Quotas.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *QuotaLimits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuotaLimits) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxSchemas != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSchemaregistry(dAtA, i, uint64(m.MaxSchemas))
	}
	if m.MaxSubjects != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSchemaregistry(dAtA, i, uint64(m.MaxSubjects))
	}
	if m.MaxSchemaSizeBytes != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSchemaregistry(dAtA, i, uint64(m.MaxSchemaSizeBytes))
	}
	if m.MaxLookupsPerHour != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSchemaregistry(dAtA, i, uint64(m.MaxLookupsPerHour))
	}
	if m.MaxUpdatesPerHour != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSchemaregistry(dAtA, i, uint64(m.MaxUpdatesPerHour))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SchemaRegistryClusterStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaRegistryClusterStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaregistry(dAtA, i, uint64(m.Time.Size()))
		n8, err := m.Time.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Phase != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSchemaregistry(dAtA, i, uint64(m.Phase))
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSchemaregistry(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSchemaregistry(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SchemaRegistryClusterList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeMeta != nil {
		l = m.TypeMeta.Size()
		n += 1 + l + sovSchemaregistry(uint64(l))
	}
	if m.ListMeta != nil {
		l = m.ListMeta.Size()
		n += 1 + l + sovSchemaregistry(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSchemaregistry(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SchemaRegistryCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeMeta != nil {
		l = m.TypeMeta.Size()
		n += 1 + l + sovSchemaregistry(uint64(l))
	}
	if m.ObjectMeta != nil {
		l = m.ObjectMeta.Size()
		n += 1 + l + sovSchemaregistry(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovSchemaregistry(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovSchemaregistry(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SchemaRegistryClusterSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSchemaregistry(uint64(l))
	}
	l = len(m.PhysicalClusterId)
	if l > 0 {
		n += 1 + l + sovSchemaregistry(uint64(l))
	}
	if m.Quotas != nil {
		l = m.Quotas.Size()
		n += 1 + l + sovSchemaregistry(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QuotaLimits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxSchemas != 0 {
		n += 1 + sovSchemaregistry(uint64(m.MaxSchemas))
	}
	if m.MaxSubjects != 0 {
		n += 1 + sovSchemaregistry(uint64(m.MaxSubjects))
	}
	if m.MaxSchemaSizeBytes != 0 {
		n += 1 + sovSchemaregistry(uint64(m.MaxSchemaSizeBytes))
	}
	if m.MaxLookupsPerHour != 0 {
		n += 1 + sovSchemaregistry(uint64(m.MaxLookupsPerHour))
	}
	if m.MaxUpdatesPerHour != 0 {
		n += 1 + sovSchemaregistry(uint64(m.MaxUpdatesPerHour))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SchemaRegistryClusterStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != nil {
		l = m.Time.Size()
		n += 1 + l + sovSchemaregistry(uint64(l))
	}
	if m.Phase != 0 {
		n += 1 + sovSchemaregistry(uint64(m.Phase))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovSchemaregistry(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSchemaregistry(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSchemaregistry(x uint64) (n int) {
	return sovSchemaregistry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SchemaRegistryClusterList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaregistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaRegistryClusterList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaRegistryClusterList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TypeMeta == nil {
				m.TypeMeta = &v1.TypeMeta{}
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ListMeta == nil {
				m.ListMeta = &v1.ListMeta{}
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &SchemaRegistryCluster{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaregistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaRegistryCluster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaregistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaRegistryCluster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaRegistryCluster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TypeMeta == nil {
				m.TypeMeta = &v1.TypeMeta{}
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectMeta == nil {
				m.ObjectMeta = &v1.ObjectMeta{}
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &SchemaRegistryClusterStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &SchemaRegistryClusterSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaregistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaRegistryClusterSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaregistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaRegistryClusterSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaRegistryClusterSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhysicalClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhysicalClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quotas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Quotas == nil {
				m.Quotas = &QuotaLimits{}
			}
			if err := m.Quotas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaregistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuotaLimits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaregistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuotaLimits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuotaLimits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSchemas", wireType)
			}
			m.MaxSchemas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSchemas |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSubjects", wireType)
			}
			m.MaxSubjects = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSubjects |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSchemaSizeBytes", wireType)
			}
			m.MaxSchemaSizeBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSchemaSizeBytes |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLookupsPerHour", wireType)
			}
			m.MaxLookupsPerHour = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLookupsPerHour |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUpdatesPerHour", wireType)
			}
			m.MaxUpdatesPerHour = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUpdatesPerHour |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaregistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaRegistryClusterStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaregistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaRegistryClusterStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaRegistryClusterStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = &v1.Time{}
			}
			if err := m.Time.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			m.Phase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Phase |= Phase(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaregistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaregistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSchemaregistry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSchemaregistry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchemaregistry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchemaregistry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSchemaregistry
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSchemaregistry
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSchemaregistry
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSchemaregistry(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSchemaregistry
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSchemaregistry = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSchemaregistry   = fmt.Errorf("proto: integer overflow")
)
