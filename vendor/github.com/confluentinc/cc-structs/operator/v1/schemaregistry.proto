syntax = "proto3";

import "gogoproto/gogo.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "operator/v1/common.proto";

package operator.v1;

option java_package = "io.confluent.cloud.protobuf.operator.v1";
option java_multiple_files = true;

option go_package = "github.com/confluentinc/cc-structs/operator/v1;v1";

message SchemaRegistryClusterList {
  k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta type_meta = 1 [(gogoproto.embed)=true, (gogoproto.jsontag)=",inline"];
  k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta list_meta = 2 [(gogoproto.embed)=true, (gogoproto.jsontag)="metadata,omitempty"];
  repeated SchemaRegistryCluster items = 3;
}

message SchemaRegistryCluster {
  k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta type_meta = 1 [(gogoproto.embed)=true, (gogoproto.jsontag)=",inline"];
  k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta object_meta = 2 [(gogoproto.embed)=true, (gogoproto.jsontag)="metadata,omitempty"];
  SchemaRegistryClusterStatus status = 3;
  SchemaRegistryClusterSpec spec = 4;
}

message SchemaRegistryClusterSpec {
  //unique id for logical Schema Registry cluster
  string id = 1;
  //unique id for physical Schema Registry cluster
  string physical_cluster_id = 2;
  QuotaLimits quotas = 3;
}

message QuotaLimits {
  int32 max_schemas = 1;
  int32 max_subjects = 2;
  int32 max_schema_size_bytes = 3;
  int32 max_lookups_per_hour = 4;
  int32 max_updates_per_hour = 5;
}

message SchemaRegistryClusterStatus {
  k8s.io.apimachinery.pkg.apis.meta.v1.Time time = 1;
  Phase phase = 2;
  string reason = 3;
}
