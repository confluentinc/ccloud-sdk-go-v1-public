package ccloud

import (
	"bytes"
	fmt "fmt"
	io "io"
	math "math"
	"runtime"
	"sort"
	"strings"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

var _ error = &Error{}

// Error implements the error interface.
func (e *Error) Error() string {
	b := new(bytes.Buffer)
	e.printStack(b)
	pad(b, ": ")
	b.WriteString(e.Message)
	e.writeNested(b)
	if b.Len() == 0 {
		return "no error"
	}
	return b.String()
}

// pad appends str to the buffer if the buffer already has some data.
func pad(b *bytes.Buffer, str string) {
	if b.Len() == 0 {
		return
	}
	b.WriteString(str)
}

func (e *Error) writeNested(b *bytes.Buffer) {
	if len(e.NestedErrors) == 0 {
		return
	}
	pad(b, ":")
	var keys []string
	for key := range e.NestedErrors {
		keys = append(keys, key)
	}
	sort.Strings(keys)
	for _, k := range keys {
		pad(b, "\n\t")
		b.WriteString(k)
		pad(b, ": ")
		b.WriteString(e.NestedErrors[k])
	}
}

// frame returns the nth frame, with the frame at top of stack being 0.
func frame(callers []uintptr, n int) *runtime.Frame {
	frames := runtime.CallersFrames(callers)
	var f runtime.Frame
	for i := len(callers) - 1; i >= n; i-- {
		var ok bool
		f, ok = frames.Next()
		if !ok {
			break // Should never happen, and this is just debugging.
		}
	}
	return &f
}

// callers is a wrapper for runtime.callers that allocates a slice.
func callers() []uintptr {
	var stk [64]uintptr
	const skip = 4 // Skip 4 stack frames; ok for both E and Error funcs.
	n := runtime.Callers(skip, stk[:])
	return stk[:n]
}

var separator = ":\n\t"

// printStack formats and prints the stack for this Error to the given buffer.
// It should be called from the Error's Error method.
func (e *Error) printStack(b *bytes.Buffer) {
	if e.Stack == nil {
		return
	}

	printCallers := callers()

	// Iterate backward through e.Stack.Callers (the last in the stack is the
	// earliest call, such as main) skipping over the PCs that are shared
	// by the error stack and by this function call stack, printing the
	// names of the functions and their file names and line numbers.
	var prev string // the name of the last-seen function
	var diff bool   // do the print and error call stacks differ now?
	for i := 0; i < len(e.Stack.Callers); i++ {
		thisFrame := frame(e.Stack.Callers, i)
		name := runtime.FuncForPC(thisFrame.PC).Name()

		if !diff && i < len(printCallers) {
			if name == runtime.FuncForPC(frame(printCallers, i).PC).Name() {
				// both stacks share this PC, skip it.
				continue
			}
			// No match, don't consider printCallers again.
			diff = true
		}

		// Don't print the same function twice.
		// (Can happen when multiple error stacks have been coalesced.)
		if name == prev {
			continue
		}

		// Find the uncommon prefix between this and the previous
		// function name, separating by dots and slashes.
		trim := 0
		for {
			j := strings.IndexAny(name[trim:], "./")
			if j < 0 {
				break
			}
			if !strings.HasPrefix(prev, name[:j+trim]) {
				break
			}
			trim += j + 1 // skip over the separator
		}

		// Do the printing.
		pad(b, separator)
		fmt.Fprintf(b, "%v:%d: ", thisFrame.File, thisFrame.Line)
		if trim > 0 {
			b.WriteString("...")
		}
		b.WriteString(name[trim:])

		prev = name
	}
}

type Error struct {
	// http status code
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty" db:"code,omitempty" url:"code,omitempty"`
	// a short, human-readable summary of the problem. It should not change from occurrence to occurrence of the problem
	Title string `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty" db:"title,omitempty" url:"title,omitempty"`
	// human-readable explanation specific to this occurrence of the problem
	Message      string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" db:"message,omitempty" url:"message,omitempty"`
	NestedErrors map[string]string `protobuf:"bytes,3,rep,name=nested_errors,json=nestedErrors,proto3" json:"nested_errors,omitempty" db:"nested_errors,omitempty" url:"nested_errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Details      []string          `protobuf:"bytes,4,rep,name=details,proto3" json:"details,omitempty" db:"details,omitempty" url:"details,omitempty"`
	Stack        *Stack            `protobuf:"bytes,5,opt,name=stack,proto3,customtype=Stack" json:"stack,omitempty" db:"stack,omitempty" url:"stack,omitempty"`
	// an application-specific error code, expressed as a string value.
	ErrorCode string `protobuf:"bytes,6,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty" db:"error_code,omitempty" url:"error_code,omitempty"`
	// optional pointer to input request document
	Source *ErrorSource `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty" db:"source,omitempty" url:"source,omitempty"`
	// list of errors that are needed for public apis
	MultiErrors          []*Error `protobuf:"bytes,8,rep,name=multi_errors,json=multiErrors,proto3" json:"multi_errors,omitempty" db:"multi_errors,omitempty" url:"multi_errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Error) GetNestedErrors() map[string]string {
	if m != nil {
		return m.NestedErrors
	}
	return nil
}

func (m *Error) GetDetails() []string {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Error) GetErrorCode() string {
	if m != nil {
		return m.ErrorCode
	}
	return ""
}

func (m *Error) GetSource() *ErrorSource {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Error) GetMultiErrors() []*Error {
	if m != nil {
		return m.MultiErrors
	}
	return nil
}

type ErrorSource struct {
	// a JSON Pointer [RFC6901] to the associated entity in the request document [e.g. \"/data\" for a primary data object, or \"/data/attributes/title\" for a specific attribute].
	Pointer string `protobuf:"bytes,1,opt,name=pointer,proto3" json:"pointer,omitempty" db:"pointer,omitempty" url:"pointer,omitempty"`
	// a string indicating which query parameter caused the error.
	Parameter string `protobuf:"bytes,2,opt,name=parameter,proto3" json:"parameter,omitempty" db:"parameter,omitempty" url:"parameter,omitempty"`
	// a url indicating the location of the conflicting resource
	Location             string   `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty" db:"location,omitempty" url:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

type Stack struct {
	Callers []uintptr
}

type MarketplacePartner int32

const (
	MarketplacePartner_UNKNOWN MarketplacePartner = 0
	MarketplacePartner_GCP     MarketplacePartner = 1
	MarketplacePartner_AWS     MarketplacePartner = 2
	MarketplacePartner_AZURE   MarketplacePartner = 3
)

var MarketplacePartner_name = map[int32]string{
	0: "UNKNOWN",
	1: "GCP",
	2: "AWS",
	3: "AZURE",
}

var MarketplacePartner_value = map[string]int32{
	"UNKNOWN": 0,
	"GCP":     1,
	"AWS":     2,
	"AZURE":   3,
}

func (x MarketplacePartner) String() string {
	return proto.EnumName(MarketplacePartner_name, int32(x))
}

func (MarketplacePartner) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_37609fa1978f1e99, []int{0}
}

func (t *Stack) Size() int {
	return 0
}
func (m *ErrorSource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pointer)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	l = len(m.Parameter)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}
func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovError(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	if len(m.NestedErrors) > 0 {
		for k, v := range m.NestedErrors {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovError(uint64(len(k))) + 1 + len(v) + sovError(uint64(len(v)))
			n += mapEntrySize + 1 + sovError(uint64(mapEntrySize))
		}
	}
	if len(m.Details) > 0 {
		for _, s := range m.Details {
			l = len(s)
			n += 1 + l + sovError(uint64(l))
		}
	}
	if m.Stack != nil {
		l = m.Stack.Size()
		n += 1 + l + sovError(uint64(l))
	}
	l = len(m.ErrorCode)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovError(uint64(l))
	}
	if len(m.MultiErrors) > 0 {
		for _, e := range m.MultiErrors {
			l = e.Size()
			n += 1 + l + sovError(uint64(l))
		}
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}
func (t *Stack) Unmarshal(data []byte) error {
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NestedErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NestedErrors == nil {
				m.NestedErrors = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowError
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowError
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthError
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthError
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowError
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthError
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthError
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipError(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthError
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NestedErrors[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stack", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v Stack
			m.Stack = &v
			if err := m.Stack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &ErrorSource{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultiErrors = append(m.MultiErrors, &Error{})
			if err := m.MultiErrors[len(m.MultiErrors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pointer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pointer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (t *Stack) MarshalTo(data []byte) (n int, err error) {
	return 0, nil
}
func (m *ErrorSource) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pointer) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintError(dAtA, i, uint64(len(m.Pointer)))
		i += copy(dAtA[i:], m.Pointer)
	}
	if len(m.Parameter) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintError(dAtA, i, uint64(len(m.Parameter)))
		i += copy(dAtA[i:], m.Parameter)
	}
	if len(m.Location) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintError(dAtA, i, uint64(len(m.Location)))
		i += copy(dAtA[i:], m.Location)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintError(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintError(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.NestedErrors) > 0 {
		for k, _ := range m.NestedErrors {
			dAtA[i] = 0x1a
			i++
			v := m.NestedErrors[k]
			mapSize := 1 + len(k) + sovError(uint64(len(k))) + 1 + len(v) + sovError(uint64(len(v)))
			i = encodeVarintError(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintError(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintError(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Details) > 0 {
		for _, s := range m.Details {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Stack != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintError(dAtA, i, uint64(m.Stack.Size()))
		n1, err := m.Stack.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.ErrorCode) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintError(dAtA, i, uint64(len(m.ErrorCode)))
		i += copy(dAtA[i:], m.ErrorCode)
	}
	if m.Source != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintError(dAtA, i, uint64(m.Source.Size()))
		n2, err := m.Source.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.MultiErrors) > 0 {
		for _, msg := range m.MultiErrors {
			dAtA[i] = 0x42
			i++
			i = encodeVarintError(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintError(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func skipError(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowError
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowError
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowError
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthError
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthError
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowError
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipError(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthError
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}
func sovError(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func encodeVarintError(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}

var (
	ErrInvalidLengthError = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowError   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptor_37609fa1978f1e99 = []byte{
	// 2053 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0xcf, 0x6f, 0x1c, 0x49,
	0x15, 0x4e, 0xfb, 0xc7, 0xcc, 0xb8, 0x6c, 0xc7, 0xde, 0x26, 0x80, 0xe3, 0xac, 0xd2, 0x66, 0x90,
	0x50, 0x88, 0xb2, 0x33, 0x1b, 0x27, 0x0a, 0x51, 0x76, 0x95, 0x5d, 0x8f, 0xe3, 0xc4, 0x5e, 0xc7,
	0x59, 0xa7, 0x9c, 0x75, 0x20, 0x39, 0x0c, 0x35, 0xdd, 0xe5, 0x99, 0xce, 0xd4, 0x74, 0xf7, 0x56,
	0x57, 0x4f, 0x32, 0x42, 0x1c, 0x11, 0x12, 0x27, 0xb8, 0x22, 0xed, 0x3f, 0x00, 0x57, 0x0e, 0x20,
	0x71, 0x45, 0xec, 0xde, 0x16, 0x89, 0x73, 0x0b, 0xe5, 0xc0, 0x8d, 0x4b, 0x1f, 0x11, 0x07, 0x54,
	0x3f, 0xba, 0x67, 0xba, 0xab, 0xc7, 0xce, 0x2a, 0x70, 0x89, 0x3b, 0xef, 0xfb, 0xea, 0x7b, 0xf5,
	0xaa, 0xde, 0x7b, 0x55, 0x65, 0x83, 0xb5, 0x3e, 0x3a, 0xe9, 0xa3, 0xa6, 0xed, 0x53, 0xdc, 0x1c,
	0x5e, 0x17, 0x3f, 0x1b, 0x01, 0xf5, 0x99, 0x6f, 0x2e, 0x0b, 0xa4, 0x21, 0x2c, 0xc3, 0xeb, 0xeb,
	0x17, 0xf3, 0x44, 0x4c, 0xa9, 0x4f, 0x25, 0x73, 0xfd, 0x42, 0xd7, 0xef, 0xfa, 0xe2, 0xb3, 0xc9,
	0xbf, 0x94, 0xb5, 0xde, 0xbf, 0x1d, 0x36, 0x5c, 0xbf, 0x89, 0x02, 0x37, 0x1b, 0xd5, 0xc5, 0x1e,
	0xa6, 0x88, 0x61, 0x47, 0x71, 0x2e, 0x77, 0x7d, 0xbf, 0x4b, 0x70, 0x53, 0xfc, 0xaf, 0x13, 0x9d,
	0x34, 0x5f, 0x52, 0x14, 0x04, 0x98, 0x86, 0x0a, 0xff, 0xee, 0x10, 0x11, 0xd7, 0x41, 0x0c, 0x37,
	0xd3, 0x0f, 0x09, 0xd4, 0xbf, 0x9a, 0x01, 0x15, 0xe8, 0x47, 0x0c, 0x53, 0xf3, 0x1e, 0x98, 0xb7,
	0x89, 0x1f, 0x39, 0x6b, 0xc6, 0x86, 0x71, 0x65, 0xa1, 0xd5, 0x48, 0x62, 0xeb, 0xaa, 0xd3, 0xb9,
	0x53, 0x17, 0xc6, 0x6b, 0xfe, 0xc0, 0x65, 0x78, 0x10, 0xb0, 0x51, 0x7d, 0x23, 0xa2, 0x44, 0xb7,
	0x42, 0x39, 0xd8, 0xdc, 0x05, 0x15, 0x8a, 0xbb, 0xae, 0xef, 0xad, 0xcd, 0x08, 0x99, 0xf7, 0x93,
	0xd8, 0xba, 0xc6, 0x65, 0xa4, 0x55, 0xd3, 0xd1, 0xcc, 0x50, 0x8d, 0x37, 0x9f, 0x83, 0xc5, 0xfe,
	0xed, 0xb0, 0x6d, 0x93, 0x28, 0x64, 0x98, 0xae, 0xcd, 0x0a, 0xb9, 0x3b, 0x49, 0x6c, 0xdd, 0xe2,
	0x72, 0x13, 0x90, 0xa6, 0x59, 0x8e, 0x41, 0xd0, 0xbf, 0x1d, 0x6e, 0x4b, 0xb3, 0xf9, 0x10, 0x54,
	0x53, 0xe1, 0x79, 0x21, 0xbc, 0x99, 0xc4, 0x56, 0x43, 0x86, 0x5b, 0x2e, 0x5a, 0x22, 0x98, 0x4a,
	0x7c, 0x32, 0x57, 0x9b, 0x5b, 0x9d, 0xaf, 0xff, 0xc2, 0x00, 0x95, 0x23, 0x6c, 0x53, 0xcc, 0xcc,
	0x9f, 0x81, 0x4a, 0x28, 0xbe, 0xc4, 0x62, 0x2e, 0x6e, 0xae, 0x37, 0xe4, 0x26, 0x36, 0x50, 0xe0,
	0xa6, 0x99, 0xd0, 0x90, 0xdc, 0xd6, 0x83, 0x7f, 0xb7, 0xe6, 0x7f, 0x65, 0xcc, 0xd4, 0x8c, 0xaf,
	0x63, 0xcb, 0x48, 0x62, 0xeb, 0x47, 0x14, 0x3b, 0xc8, 0x66, 0x77, 0xea, 0xef, 0xd5, 0x37, 0xf8,
	0x84, 0xa4, 0x90, 0x36, 0x1f, 0xcd, 0x0c, 0x95, 0xcb, 0xfa, 0x6f, 0x67, 0x40, 0x75, 0xeb, 0x70,
	0x6f, 0x1f, 0x8f, 0x42, 0xb3, 0x03, 0xe6, 0xfa, 0x78, 0x14, 0xae, 0x19, 0x1b, 0xb3, 0x57, 0x16,
	0x37, 0x37, 0x1a, 0xb9, 0x5c, 0x6c, 0x28, 0x56, 0x83, 0xff, 0xb3, 0xe3, 0x31, 0x3a, 0x6a, 0x5d,
	0x4b, 0x62, 0xeb, 0x8a, 0x58, 0x5f, 0x3c, 0x0a, 0xf5, 0x85, 0xcd, 0x1b, 0xa1, 0xd0, 0x5e, 0xff,
	0x9d, 0x01, 0x16, 0x32, 0x05, 0xf3, 0x43, 0x30, 0xdb, 0xc7, 0x23, 0x95, 0x44, 0x57, 0x93, 0xd8,
	0xfa, 0x81, 0x92, 0x2b, 0x53, 0x9b, 0x14, 0xe3, 0xc3, 0xcc, 0xe7, 0x60, 0x7e, 0x88, 0x48, 0x84,
	0x45, 0xf6, 0x2c, 0x6e, 0x7e, 0xbb, 0x74, 0xc2, 0xe3, 0xdc, 0x14, 0x5c, 0x4d, 0xb8, 0x68, 0x85,
	0x52, 0xf3, 0xce, 0xcc, 0x6d, 0xa3, 0xfe, 0xaf, 0x39, 0x50, 0x91, 0x2a, 0x66, 0x17, 0x9c, 0x0f,
	0x51, 0x48, 0xda, 0x03, 0x6c, 0xf7, 0x90, 0xe7, 0x86, 0x03, 0x35, 0xe9, 0x8f, 0x93, 0xd8, 0xfa,
	0x50, 0xac, 0x7c, 0x0e, 0xd5, 0x77, 0x60, 0x1a, 0x0c, 0x97, 0x39, 0x74, 0x90, 0x22, 0xa6, 0x0d,
	0x96, 0x7b, 0x28, 0xec, 0x61, 0xa7, 0xad, 0x92, 0x42, 0x96, 0xc6, 0xdd, 0x24, 0xb6, 0xee, 0x70,
	0x3f, 0x39, 0x50, 0x73, 0x33, 0x0d, 0x85, 0x4b, 0x12, 0x51, 0x29, 0xa7, 0x9c, 0xb4, 0x4f, 0x22,
	0xcf, 0x66, 0xbc, 0xfe, 0x66, 0x75, 0x27, 0x19, 0x58, 0xea, 0xa4, 0x0c, 0x95, 0x4e, 0xee, 0x2b,
	0xc0, 0x1c, 0x02, 0x93, 0xf8, 0x5d, 0xd7, 0x46, 0x24, 0x2d, 0xb0, 0xb6, 0xeb, 0xac, 0xcd, 0x09,
	0x4f, 0xbb, 0x49, 0x6c, 0xdd, 0xe3, 0x9e, 0x74, 0x86, 0xe6, 0xee, 0x54, 0x0a, 0x5c, 0x55, 0xb0,
	0x2a, 0xd6, 0x3d, 0xc7, 0xdc, 0x07, 0xd5, 0x28, 0x94, 0xce, 0x2a, 0xf9, 0x72, 0x55, 0x66, 0xcd,
	0x83, 0x6e, 0x87, 0x15, 0x6e, 0xdb, 0x73, 0xcc, 0x3e, 0x58, 0x09, 0x31, 0x1d, 0xba, 0x36, 0x6e,
	0x23, 0xdb, 0xf6, 0x23, 0x8f, 0xad, 0x55, 0x37, 0x8c, 0x2b, 0xb5, 0x56, 0x2b, 0x89, 0xad, 0xbb,
	0xb2, 0xe4, 0x72, 0x70, 0x49, 0xed, 0x4d, 0xc3, 0xe1, 0x79, 0x85, 0x6d, 0x49, 0xa8, 0xfe, 0xeb,
	0x0a, 0x78, 0x77, 0x9f, 0xe7, 0xf0, 0x2e, 0x46, 0x84, 0xf5, 0xec, 0x1e, 0xb6, 0xfb, 0x3b, 0xaf,
	0x18, 0xa6, 0x1e, 0x22, 0xa2, 0x42, 0x8f, 0xc0, 0x82, 0xc8, 0xf1, 0xf6, 0xb8, 0x6a, 0x6e, 0x25,
	0xb1, 0xb5, 0x29, 0xaa, 0x26, 0x05, 0xf4, 0xda, 0x29, 0x41, 0x60, 0x4d, 0x58, 0x79, 0x6a, 0xbf,
	0x00, 0x4b, 0x92, 0x91, 0x4b, 0xb8, 0x07, 0x49, 0x6c, 0x6d, 0x17, 0xba, 0xcb, 0x24, 0x6d, 0x8a,
	0x17, 0x3d, 0xf3, 0x16, 0x05, 0xa0, 0x12, 0x0f, 0x01, 0xe0, 0x38, 0x6d, 0x14, 0xb8, 0x22, 0x02,
	0x99, 0x75, 0xdb, 0x49, 0x6c, 0x7d, 0x54, 0xf0, 0x34, 0x26, 0x69, 0x7e, 0x4a, 0x21, 0x58, 0x73,
	0x9c, 0xad, 0xc0, 0xe5, 0xe1, 0x9c, 0x80, 0xf3, 0x72, 0x2a, 0xc4, 0xf5, 0xfa, 0xc2, 0xcd, 0x5c,
	0xbe, 0x52, 0xf3, 0xe8, 0x94, 0x38, 0x4a, 0x60, 0x28, 0x97, 0xe9, 0xa1, 0xeb, 0xf5, 0xb9, 0x9f,
	0x9f, 0x83, 0x77, 0x26, 0xa8, 0x6a, 0xed, 0xe4, 0xf9, 0xf0, 0x38, 0x89, 0xad, 0x83, 0xd2, 0xb5,
	0x9b, 0xe0, 0x9e, 0xe6, 0x58, 0x5f, 0xc5, 0x95, 0xcc, 0xb7, 0x5a, 0xc9, 0x2c, 0x4c, 0xda, 0x41,
	0xb6, 0x08, 0xb3, 0x52, 0x16, 0x66, 0x8a, 0x4e, 0xf1, 0x56, 0x02, 0xab, 0x30, 0x61, 0x07, 0xd9,
	0xb9, 0x30, 0x05, 0x55, 0x85, 0x59, 0x3d, 0x23, 0xcc, 0x09, 0xee, 0x69, 0x8e, 0xa7, 0x85, 0xc9,
	0x7d, 0xcb, 0x30, 0xeb, 0x7f, 0x9a, 0x01, 0x97, 0xf6, 0x8f, 0x1e, 0x3f, 0x9c, 0x56, 0x11, 0xf9,
	0x84, 0x32, 0xfe, 0x1f, 0x09, 0xf5, 0x29, 0xa8, 0xf5, 0xc3, 0xcf, 0x89, 0x70, 0x20, 0x6b, 0xe3,
	0x66, 0x12, 0x5b, 0xef, 0x8b, 0x68, 0x95, 0x5d, 0x0f, 0x52, 0x07, 0x60, 0x95, 0x1b, 0x65, 0x86,
	0x2e, 0x0a, 0x5c, 0x2d, 0xa6, 0xac, 0x82, 0x9d, 0x24, 0xb6, 0xb6, 0x8a, 0x8b, 0x39, 0x66, 0x95,
	0x7b, 0xd0, 0x17, 0x10, 0x70, 0xbb, 0x5a, 0xbb, 0x7f, 0xd6, 0xc0, 0xf2, 0x13, 0x17, 0x53, 0xec,
	0x1c, 0x31, 0x9f, 0xa2, 0x2e, 0xe6, 0x37, 0x99, 0x0e, 0xb2, 0xfb, 0xd8, 0x4b, 0x2f, 0x6e, 0x59,
	0x6b, 0x54, 0x66, 0xcd, 0x8d, 0x6e, 0x87, 0xa9, 0x04, 0xbf, 0xbe, 0x75, 0x22, 0xbb, 0x9f, 0xb5,
	0x8c, 0xec, 0xfa, 0x26, 0xad, 0xba, 0x56, 0xd1, 0x0c, 0xd5, 0xf8, 0x89, 0x8b, 0xe0, 0xec, 0x5b,
	0x5e, 0x04, 0x5f, 0x80, 0x15, 0xe6, 0x62, 0xda, 0x46, 0x84, 0xb4, 0x99, 0x1f, 0xb8, 0x76, 0x28,
	0xca, 0x7f, 0xa2, 0x5f, 0x17, 0x60, 0x4d, 0x7b, 0x3a, 0x0e, 0x97, 0x39, 0xb6, 0x45, 0xc8, 0x13,
	0x81, 0x98, 0x1f, 0x83, 0x39, 0xea, 0x13, 0xac, 0x8a, 0x3e, 0xbb, 0x0d, 0x71, 0x9b, 0x3e, 0xe3,
	0xbc, 0x11, 0x8a, 0x91, 0x26, 0x05, 0xef, 0x60, 0xcf, 0xa6, 0xa3, 0x80, 0x1f, 0x98, 0x3c, 0x5f,
	0xc6, 0x87, 0xd6, 0xfd, 0x24, 0xb6, 0x5a, 0x5c, 0x4e, 0x23, 0x68, 0xda, 0xa7, 0x31, 0xe0, 0xca,
	0x18, 0xdd, 0xc7, 0xa3, 0x3d, 0xc7, 0xfc, 0xa5, 0x01, 0x56, 0x88, 0xcf, 0x0f, 0xd4, 0x9e, 0xcf,
	0x42, 0xcc, 0xda, 0x83, 0x50, 0xd4, 0xf3, 0xe2, 0xe6, 0xa5, 0x86, 0x7c, 0x19, 0x34, 0xd2, 0x97,
	0x41, 0x63, 0xcf, 0x63, 0xb7, 0x6e, 0x1e, 0xf3, 0xfb, 0xd0, 0x78, 0xfd, 0x0a, 0x63, 0x4b, 0x8e,
	0xeb, 0x69, 0x38, 0x5c, 0x16, 0xd8, 0xae, 0x80, 0x0e, 0x42, 0xf3, 0x10, 0xd4, 0xb0, 0xe7, 0x04,
	0xbe, 0xeb, 0xb1, 0xb5, 0x5a, 0xbe, 0xb0, 0x52, 0x7b, 0x49, 0xac, 0x1a, 0x00, 0x33, 0x15, 0xf3,
	0x37, 0x06, 0xf8, 0x4e, 0xe1, 0xbc, 0x4d, 0xab, 0x0c, 0x6c, 0x18, 0x57, 0x96, 0x5a, 0xcf, 0x93,
	0xd8, 0x7a, 0xaa, 0xdd, 0x99, 0xcb, 0x06, 0x9c, 0x75, 0x8e, 0x97, 0xd4, 0xde, 0x85, 0xfc, 0x71,
	0xae, 0x1a, 0xf5, 0x10, 0x98, 0xc5, 0xa1, 0xae, 0xb3, 0xb6, 0x98, 0xbf, 0x06, 0xe9, 0x8c, 0x33,
	0xfd, 0x17, 0xae, 0x41, 0x79, 0xdf, 0x7b, 0x0e, 0xbf, 0xe3, 0x39, 0x38, 0x20, 0xfe, 0x68, 0x80,
	0xa5, 0xcb, 0xa5, 0xfc, 0x1d, 0x2f, 0x07, 0xea, 0x4d, 0x71, 0x0a, 0x0a, 0x97, 0xc6, 0xc8, 0x9e,
	0xf3, 0xc9, 0x5c, 0x6d, 0x61, 0x15, 0xd4, 0xff, 0x3a, 0x0b, 0x2e, 0x41, 0x8c, 0x1c, 0xd7, 0xc3,
	0x61, 0x28, 0x3b, 0xf5, 0x36, 0xef, 0xd4, 0x10, 0x7f, 0x1e, 0xe1, 0x90, 0x99, 0xbf, 0x37, 0xc0,
	0x0a, 0x95, 0xdf, 0x6d, 0x1b, 0x51, 0xea, 0x62, 0xaa, 0x1e, 0x19, 0x77, 0x0b, 0x77, 0xf6, 0x53,
	0x54, 0x1a, 0xea, 0xe7, 0xb6, 0x14, 0x90, 0x4f, 0x90, 0x2c, 0x2b, 0x0b, 0xf2, 0x25, 0x1d, 0x63,
	0x1a, 0x0e, 0xcf, 0xd3, 0x9c, 0xb0, 0xf9, 0x0c, 0xcc, 0x8b, 0x87, 0xb6, 0x7a, 0x56, 0x5c, 0x28,
	0x4c, 0x71, 0x87, 0x63, 0xe3, 0x57, 0x85, 0xa0, 0xea, 0x69, 0x5a, 0xb0, 0x42, 0x29, 0xb9, 0xfe,
	0x85, 0x01, 0xbe, 0x55, 0x12, 0xc7, 0x5b, 0x3e, 0x84, 0xee, 0x4d, 0x3e, 0x84, 0x16, 0xde, 0xe6,
	0xc5, 0xf3, 0x17, 0x03, 0x5c, 0x2c, 0xdf, 0x83, 0x80, 0x8c, 0xc6, 0x2b, 0x63, 0xfc, 0xcf, 0x57,
	0x86, 0x1f, 0x4d, 0x03, 0x1c, 0x86, 0xa8, 0x9b, 0x46, 0x91, 0x1d, 0x4d, 0xca, 0xac, 0x29, 0xe9,
	0x76, 0x98, 0x4a, 0xd4, 0xff, 0x6c, 0x80, 0x45, 0x7e, 0x7b, 0xc5, 0x1e, 0x73, 0x11, 0x11, 0xad,
	0x86, 0x5f, 0xe8, 0x3d, 0x34, 0xc0, 0x6a, 0x91, 0xb3, 0x56, 0x93, 0xda, 0x4b, 0x5f, 0x05, 0x05,
	0x00, 0x66, 0x2a, 0xe6, 0x73, 0x50, 0x0b, 0x50, 0x18, 0xbe, 0xf4, 0xa9, 0xa3, 0x26, 0xfc, 0x51,
	0x12, 0x5b, 0x1f, 0x14, 0x7a, 0x4b, 0x4a, 0xd1, 0xc4, 0x4b, 0x00, 0x98, 0x09, 0xd6, 0xbf, 0x32,
	0xc0, 0xea, 0x01, 0xa2, 0x7d, 0xcc, 0x02, 0x82, 0x6c, 0xcc, 0x23, 0x09, 0xf9, 0x2e, 0x33, 0xbf,
	0x8f, 0xbd, 0xe2, 0xef, 0x5c, 0x84, 0x51, 0x3f, 0xc6, 0x0a, 0x56, 0x28, 0x07, 0x9b, 0x3e, 0xa8,
	0x06, 0x88, 0x32, 0x0f, 0xcb, 0xfc, 0x3e, 0xbf, 0xf9, 0xbd, 0xc2, 0x2e, 0x4e, 0xf8, 0x3d, 0x94,
	0xc4, 0xf1, 0x56, 0xa8, 0x91, 0x25, 0xd1, 0x14, 0xed, 0x30, 0xf5, 0x52, 0xff, 0x4f, 0x15, 0x98,
	0xf7, 0x10, 0x43, 0x2d, 0x44, 0x90, 0x67, 0x63, 0xba, 0xed, 0x7b, 0x27, 0x6e, 0xd7, 0xfc, 0x9b,
	0x01, 0xea, 0x14, 0x07, 0xc4, 0xb5, 0x91, 0x38, 0xb9, 0x58, 0x8f, 0xfa, 0x8c, 0x11, 0xdc, 0xee,
	0x8c, 0x18, 0x0e, 0xdb, 0x01, 0xa6, 0xbc, 0xc3, 0xaa, 0x4c, 0x3b, 0xf5, 0x64, 0xea, 0x25, 0xb1,
	0xe5, 0xc8, 0x1e, 0x70, 0x96, 0x5c, 0x49, 0x5b, 0xf8, 0x06, 0x43, 0xe0, 0xe5, 0x09, 0xfa, 0x13,
	0xc5, 0x6e, 0x71, 0xf2, 0x21, 0xa6, 0x47, 0xd8, 0x36, 0xff, 0x6e, 0x80, 0xef, 0x87, 0x98, 0x9c,
	0xb4, 0x7b, 0x18, 0x11, 0xd7, 0xeb, 0xb6, 0xbb, 0x3e, 0x22, 0xed, 0xa1, 0xeb, 0x13, 0xe9, 0x01,
	0x7b, 0xa8, 0x43, 0xb0, 0xa3, 0x1a, 0xcb, 0xba, 0x16, 0x54, 0xcb, 0xf7, 0x89, 0x8c, 0xe9, 0x45,
	0x12, 0x5b, 0x27, 0xf2, 0x60, 0x38, 0x53, 0xae, 0xe4, 0xa4, 0xf8, 0x26, 0x63, 0xa0, 0xc5, 0xf9,
	0xbb, 0x92, 0xfe, 0xc0, 0x47, 0xe4, 0x38, 0x25, 0xef, 0x48, 0xae, 0xf9, 0xa5, 0x01, 0x36, 0x06,
	0xe8, 0x55, 0x7b, 0xe8, 0x93, 0x68, 0x80, 0xc5, 0x3a, 0x45, 0xdd, 0x5e, 0x10, 0xb1, 0xf6, 0xa0,
	0x93, 0x6d, 0xd4, 0xec, 0xf4, 0x8d, 0xba, 0xb1, 0x29, 0x83, 0x72, 0x92, 0xd8, 0xfa, 0xa9, 0xa8,
	0xe8, 0x33, 0xc4, 0xf4, 0x52, 0x7f, 0xf3, 0x01, 0xf0, 0xd2, 0x00, 0xbd, 0x3a, 0x16, 0xdc, 0x27,
	0x19, 0xf5, 0xa0, 0xa3, 0x76, 0xe8, 0x8f, 0x06, 0xb8, 0xf4, 0x92, 0xba, 0x2c, 0xaf, 0x13, 0x11,
	0xe6, 0x06, 0x84, 0x9f, 0x4a, 0x73, 0x22, 0x8a, 0x77, 0xb5, 0x28, 0xee, 0xf9, 0x51, 0x87, 0x60,
	0x19, 0xc6, 0xb3, 0x24, 0xb6, 0x8e, 0x79, 0x18, 0xa7, 0x08, 0x69, 0x11, 0xbc, 0x19, 0x17, 0x5e,
	0x14, 0xbc, 0x89, 0x89, 0x67, 0x2c, 0xf3, 0x0f, 0x06, 0x58, 0xa7, 0x18, 0x39, 0x53, 0x66, 0x3e,
	0xff, 0x06, 0x33, 0xff, 0x71, 0x12, 0x5b, 0x4f, 0x64, 0xa5, 0x4c, 0xd3, 0x29, 0xa9, 0x90, 0x37,
	0xa0, 0xc2, 0x35, 0x4e, 0x2b, 0x9b, 0x76, 0xfd, 0x8b, 0x19, 0xb0, 0x7a, 0x1f, 0x23, 0x16, 0x51,
	0x7c, 0x9f, 0xa0, 0xae, 0x98, 0x88, 0x79, 0x00, 0xaa, 0xae, 0xc7, 0xda, 0x43, 0x44, 0x44, 0x81,
	0xcf, 0x8e, 0x3b, 0x8c, 0x32, 0x6b, 0xd3, 0xd0, 0xed, 0xbb, 0xe7, 0x60, 0xc5, 0xf5, 0xd8, 0x31,
	0x22, 0xe6, 0x63, 0x50, 0xeb, 0xf8, 0x3e, 0x11, 0x7a, 0x33, 0xe2, 0xb6, 0x9f, 0x75, 0xf7, 0xd4,
	0xae, 0x3f, 0x46, 0x74, 0x60, 0xf7, 0x1c, 0xac, 0x76, 0x64, 0x09, 0x9a, 0x3f, 0x01, 0x20, 0x64,
	0x94, 0x17, 0x10, 0x17, 0x95, 0xaf, 0x92, 0xdb, 0x49, 0x6c, 0xdd, 0x14, 0x45, 0x99, 0x21, 0x7a,
	0xed, 0x95, 0x41, 0xbb, 0xe7, 0xe0, 0x82, 0x04, 0x8e, 0x11, 0x69, 0x2d, 0x01, 0x70, 0x42, 0x90,
	0xe0, 0x44, 0xf8, 0xea, 0x5d, 0x60, 0xea, 0x1d, 0xd7, 0x5c, 0x04, 0xd5, 0xcf, 0x1e, 0xed, 0x3f,
	0xfa, 0xf4, 0xe9, 0xa3, 0xd5, 0x73, 0x66, 0x15, 0xcc, 0x3e, 0xd8, 0x3e, 0x5c, 0x35, 0xf8, 0xc7,
	0xd6, 0xd3, 0xa3, 0xd5, 0x19, 0x73, 0x01, 0xcc, 0x6f, 0x3d, 0xfb, 0x0c, 0xee, 0xac, 0xce, 0xb6,
	0xbc, 0x2f, 0x5f, 0x5f, 0x36, 0xbe, 0x7e, 0x7d, 0xd9, 0xf8, 0xc7, 0xeb, 0xcb, 0x06, 0xf8, 0xa1,
	0xeb, 0x37, 0x6c, 0xdf, 0x3b, 0x21, 0x11, 0xf6, 0x58, 0x43, 0xfc, 0x96, 0x7d, 0x9c, 0x0a, 0xb9,
	0x3e, 0x7f, 0x68, 0x3c, 0xbb, 0xd1, 0x75, 0x59, 0x2f, 0xea, 0x34, 0x6c, 0x7f, 0xd0, 0xcc, 0x06,
	0xb9, 0x9e, 0xdd, 0xb4, 0xed, 0xf7, 0x42, 0x46, 0x23, 0x9b, 0x85, 0xcd, 0xdc, 0x1f, 0x20, 0x3e,
	0x18, 0x5e, 0xef, 0x54, 0x84, 0xdc, 0x8d, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xce, 0x27, 0x2b,
	0xce, 0xc4, 0x18, 0x00, 0x00,
}
